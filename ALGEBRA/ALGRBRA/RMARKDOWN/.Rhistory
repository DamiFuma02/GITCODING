vettoreA = c(1,2,3)
(vettoreA)
"ciao"
[2]
l
---
title: "STRUTTURE DATI"
author: "Damiano Fumagalli"
date: "March 09, 2022"
output: "html_document"
---
* OMOGENEE
1. VETTORI
2. MATRICI
* ETEROGENEE
1. LISTE
2. DATAFRAME
* UNIDIMENSIONALI
1. VETTORI
2. LISTE
* BIDIMENSIONALI
1. MATRICI
2. DATAFRAME
[LINK A GOOGLE](https://www.google.it)
![testo alternativo](./ACCESSO.jpg "testo visualizzato all'hover")
# VETTORI
```{r}
(A = c(1,2,3))  #stampa il vettore appena creato
(B = c(1,2,3))
(C = c(A,B))    #concatenazione vettori
(R = 2:10)   #vettore in range 2<=x<=100
#(B = c(1,2)) #per visualizzare l'errore di somma
```
## INDEXING
```{r}
#INDEX PARTE DA 1
(A[1]) #primo elemento
(A[3]) #terzo elemento
```
## SELEZIONE
```{r}
(A[-c(1,2)])  #visualizza gli elementi tranne quelli indicati
(A<=2)   #tutti gli elementi di A <= 2
(A[A%%2==0])  #seleziona tutti gli elementi di A per cui l'espressione è VERA
```
## CHIAVE VALORE
```{r}
(v = c(nome1 = "Luigi", nome2 = "Piero", nome3 = "Dami"))
#OPPURE
b = c("Luigi", "Cane", "Gatto")
(b)   #prima dell asssegnazione dei nomi
names(b) = c("nome1", "nome2", "nome3")
(b)    #DOPO assegnazione
(v[c("nome1", "nome2")])
```
## ARITMETICA
```{r}
(A)  #vettoreA
(B)  #vettoreB
(A+B)   #somma elemento per elemento
(10+A) #somma ogni elemento di A con 10
(A*B)  #prodotto elemento per elemento a1b1, ab2b2, a3b3
(10*A)  #moltiplica ogni elemento di A con 10
(A%*%B)   #prodotto scalare   a1b1+a2b2+a3b3
```
##  ESERCIZIO 1
Dato un vettore di interi da 0 a 100
```{r}
(vettore = 0:100)
```
selezionare gli elementi che rispettano le seguenti condizioni:
1. PARI
```{r}
(vettore[vettore%%2==0])   #stampa tutti gli elementi pari
```
2. PARI oppure DIVISIBILE per 5
```{r}
(vettore[vettore%%2==0 | vettore%%5==0])   #pari o multipli di 5
```
3. DISPARI e DIVISIBILE per 7
```{r}
(vettore[vettore%%2==0 & vettore%%7==0])   #pari o multipli di 5
```
## ESERCIZIO 2
Dato un numero **intero** individuare se esso è **primo**
> PRIMO = **non ha divisori comuni minori** di esso
```{r}
(n = floor(runif(1,min=0, max=100)))   #randomico tra 0 e 100 compresi
(divisori = 2:(n-1))
n== 2L | all(n %% divisori !=0)
```
## FUNZIONI PER VETTORI
**FACTOR** contiene l'elenco di tutti i possibili valori del vettore
```{r}
(b = factor(c("animali", "piante", "insetti", "piante", "animali")))
```
**TYPEOF** restituisce il tipo di dato del suo argomento
```{r}
(arg = c("ciao", "cia"))
typeof(arg)
```
# LISTE
> Può essere conosiderata come un vettore con elementi di diverso tipo
```{r}
(IO = list("Damiano", cognome = "Fumagalli", eta = 19))
typeof(IO)
#STAMPA LA STRUTTURA
str(IO)
```
## INDEXING
```{r}
#INDEX PARTE DA 1
(primoElemento = IO[1])
typeof(primoElemento)
(primoo = IO[[1]])   #accede direttamente al valore
typeof(primoo)
#ACCESSO a un ELEMENTO tramite CHIAVE
(IO$cognome)
#SOTTOLISTE
(IO[c("cognome", "eta")])   #lista di chiavi
(IO[c(1,2)])   #lista di posizioni
```
##  ESERCIZIO 1
Data la seguente lista:
```{r}
(l = list(1, list(1,2,3), list("a",1, list("TRUE", "FALSE"))))
```
TROVARE:
* la lista list(1,2,3)
```{r}
(l[[2]])
```
* l'elemento 1 della list(1,2,3)
```{r}
(l[[2]][[1]])
```
* l'elemento "TRUE" della list("TRUE", "FALSE")
```{r}
(l[[3]][[3]][[2]])
```
```{r}
#library(datasets)
#data(airquality)
#summary(airquality)
```
l
l[2]
a = l[2]
a[2]
a
(b = factor(c("animali", "piante", "insetti", "piante", "animali")))
typeof(b)
b
b[1]
b[2]
b[3]
b[4]
levels(b)
(M = matrix(data = c(1,2,3,4,5,6,7,8,9), nrow = 3))
(M = matrix(data = c(1,2,3,4,5,6,7,8,9), nrow = 2))
v = 1:9   #length(v) multipla di nrow
(M = matrix(data = v, nrow = 2))
(M = matrix(data = v, nrow = 3))
v = 1:10   #length(v) multipla di nrow
(M = matrix(data = v, nrow = 3))
(M = matrix(data = v, nrow = 4))
(M = matrix(data = v, nrow = 2))
V = 1:10   #length(v) multipla di nrow
(M = matrix(data = V, ncol = 3))
(M = matrix(data = V, ncol = 2))
M[1]
M[1,]
nRiga = 2  #riga da visualizzare
(M[nRiga , ])
M[2]
M[[2]]
M[1][2]
dim(M)   #restituisce nrow e ncol
typeof(dim(M))   #restituisce nrow e ncol
dim(M)[1]   #restituisce nrow e ncol
(M[nRiga , ])
M[nRiga,]
M[nRiga,][1]
(vettoreRiga = M[nRiga, ])
nCol = 2   #colonna da visualizzare
(vettoreColonna = M[ ,nCol])
(vettoreColonna[nRiga])
diag(M)
(M)
(M[-3])
(M[-c(1,2,,7)])
(M[-c(1,2,7)])
(M[M%%2==0])
condizione = M%%2==0
(M[condizione])   #solo gli elementi PARI
(P = matrix(data = runif(9), nrow = 3, byrow = TRUE))
colonnaDaAggiungere = c(3,3,3)
(P = cbind(P, colonnaDaAggiungere))
rigaDaAggiungere = c(3,3,3)
(P = rbind(P, rigaDaAggiungere))
rigaDaAggiungere = c(3,3,3,3)
(P = rbind(P, rigaDaAggiungere))
(P)
spectrum = eigen(P)
(C = matrix(data = 1:9, nrow = 3))
(v = eigen(C)$values)
diag(C)
sum(v)
sum(diag(C))
prod(v)
name = c("John","Samuel", "Uma", "Bruce", "Tim")
age = c(23, 31, 17, 41, 25)
married = c(TRUE, FALSE, FALSE, TRUE, TRUE)
pulp = data.frame(name, age, married)
pulp
pulp$name
(pulp[1])
(pulp[1])
(pulp[[1]])
(pulp(pulp$age < 20))
(pulp[pulp$age < 20])
(pulp[pulp$age < 20])
(pulp[married == TRUE,  "name"])
(pulp[married == FALSE & age>18])
(pulp[married == FALSE & age>18])
(pulp[age>18 & married == FALSE, "name" ])
(pulp[age>18 & married == FALSE, "name" ])
(pulp[ married == FALSE & age>=18, "name" ])
x = 49
if (x %% 7 == 0){
x
} else {
-x
}
x = 50
if (x %% 7 == 0){
x
} else {
-x
}
x = 108
for (i in 2:(x/2)) {
if (x %% i == 0) i
}
for (i in 2:(x/2)) {
if (x %% i == 0) i
}
x = 108
for (i in 2:(x/2)) {
if (x %% i == 0) (i)
}
x = 108
for (i in 2:(x/2)) {
if (x %% i == 0) print(i)
}
while (i <= x/2) {
if (x %% i == 0) print(i)
i = i+1
}
i
i = 0
while (i <= x/2) {
if (x %% i == 0) print(i)
i = i+1
}
while (i <= x/2) {
if (x %% i == 0) { print(i) }
i = i+1
}
while (i <= (x/2)) {
if (x %% i == 0) { print(i) }
i = i+1
}
i = 1
while (i <= (x/2)) {
if (x %% i == 0) { print(i) }
i = i+1
}
rnorm(4)
runif(4)
runif(4)
runif(1)
DF = data.frame(
a = rnorm(4),
b = rnorm(4),
c = rnorm(4),
d = rnorm(4)
)
DF
ncol(DF)
output = vector("double", ncol(DF))
(output = vector("double", ncol(DF)))
(output = vector("double", ncol(DF)))
for (i in 1:ncol(df)) {
output[i] = mean(df[[i]])
}
(output = vector("double", ncol(DF)))
for (i in 1:ncol(DF)) {
output[i] = mean(DF[[i]])
}
(output)
sample(1:5, 1)
sample(1:5, 1)
sample(1:5, 1)
range = 1:5
nValori = 3
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
sample(range, nValori)
range = 1:2
sample(range, nValori)
sample(range, nValori, replace = TRUE)
range = 1:2
nValori = 3
sample(range, nValori, replace = TRUE)
range = 1:3
sample(range, nValori, replace = TRUE)
means = c(0,1,2)
for (i in 1:length(means)) {
n = sample(1:100, 1)
ouput = c(output, means[i])
}
output
means[1]
means = c(0,1,2)
for (i in 1:length(means)) {
n = sample(1:100, 1)
ouput[[i]] = rnorm(n, means[i])
}
means = c(0,1,2)
output = double()
for (i in 1:length(means)) {
n = sample(1:100, 1)
ouput[[i]] = rnorm(n, means[i])
}
x = 1:100
s = 0
for (i in x) {
s = s+x[i]
}
s
sum(x)
x = 1:10
(x * (x+1)/2)
x = 1:10
n = length(x)
(n * (n+1)/2)
x = 1:100
x = 1:100
n = length(x)
(n * (n+1)/2)
args(log)
log(128,base = 2)
log(100)
f = function(x=0, y=0) {
sqrt(x^2 + y^2)
}
f(1,1)
f(,2)  #y=2   x=0(DEFAULT)
x=2
y=3
'%simboloOperatore%' = function(x, y) {
#FUNZIONE ESEGUITA DALL'OPERATORE
x+y
}
x %simboloOperatore% y
fattoriale = function(x) {
if (x == 0) {1} else {
x*fattoriale(x-1)
}
}
fattoriale(3)
fattoriale(5)
g = function(funzione, n) {
sum = 0
for (i in 1:n) sum = sum + funzione(i)
sum
}
g(fattoriale, 5)
DF = data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
DF
name = c("John","Samuel", "Uma", "Bruce", "Tim")
age = c(23, 31, 17, 41, 25)
married = c(TRUE, FALSE, FALSE, TRUE, TRUE)
params = c(name,age,married)
pulp = data.frame(params)
pulp
name = c("John","Samuel", "Uma", "Bruce", "Tim")
age = c(23, 31, 17, 41, 25)
married = c(TRUE, FALSE, FALSE, TRUE, TRUE)
params = matrix(DATA = c(name,age,married))
name = c("John","Samuel", "Uma", "Bruce", "Tim")
age = c(23, 31, 17, 41, 25)
married = c(TRUE, FALSE, FALSE, TRUE, TRUE)
params = matrix(DATA = c(name,age,married), nrow = 3)
v = 1:10
(M = matrix(data = V,nrow = 2))
M$data
M.data
M[data]
(M = matrix(data = V, ncol = 3))
V = 1:12   #length(v) multipla di nrow | ncol
(M = matrix(data = V, ncol = 3))
M[1:2][1:3]
M[1:2]
M
M[-c(1,2),-c(5,9)]
M[-c(1,2),-c(5,9,10)]
(B = matrix(data = runif(9)))
(B = matrix(data = runif(9), ncol = 3))
A = c(1,2,3,4)
dim(A)
(B)
(B = c(TRUE, FALSE, TRUE, FALSE))
(B)
means(B)
mean(B)
(b = factor(c("animali", "piante", "insetti", "piante", "animali")))
typeof(b)
(b = factor(c("animali", "piante", "insetti", "piante", "animali")))
b
b[1]
e = c(22, 56, 3, 56, 22, 18, 3)
factor(e)
(A = matrix(data = 1:9, nrow = 3))
9:1
(A = matrix(data = 1:6, ncol = 3))
(B = matrix(data = 12:1, nrow = 3))
(A %*% B)
(C)
t(C)
# DICHIARAZIONE DEI BLOCCHI
(A = matrix(data = c(1,2,3,0,3,1), ncol=2, byrow = TRUE)
)
# DICHIARAZIONE DEI BLOCCHI
(A = matrix(data = c(1,2,3,0,3,1), nrow=2, byrow = TRUE))
(B = matrix(data = c(0,5,2,4), nrow=2, byrow = TRUE))
(C = matrix(data = c(0,1,0), nrow=1, byrow = TRUE))
(A = matrix(data = c(1,2,3,0,3,1), nrow=2, byrow = TRUE))
(B = matrix(data = c(0,5,2,4), nrow=2, byrow = TRUE))
(C = matrix(data = c(0,1,0), nrow=1, byrow = TRUE))
(D = matrix(data = c(2,1), nrow=1, byrow = TRUE))
(M = matrix(data = c(A,B,C,D),nrow=3, byrow = TRUE))
(M = matrix(data = c(1,2,3,0,5,0,3,1,2,4,0,1,0,2,1),nrow=3, byrow = TRUE))
# SECONDA MATRICE
(N = matrix(data = c(1,-1,0,1,0,0,1,-1,0,1), ncol=2, byrow = TRUE))
#PRIMA MATRICE
(M)
#SECONDA MATRICE
(N)
(M %*% N)
c(e,g)
(MperN = matrix(data = c("AxE + BxG", "CxE + DxG")))
(a = A %*% E)   #prodotto scalare
# PRIMA MATRICE
(M = matrix(data = c(1,2,3,0,5,0,3,1,2,4,0,1,0,2,1),nrow=3, byrow = TRUE))
# DICHIARAZIONE DEI BLOCCHI
(A = matrix(data = c(1,2,3,0,3,1), nrow=2, byrow = TRUE))
(B = matrix(data = c(0,5,2,4), nrow=2, byrow = TRUE))
(C = matrix(data = c(0,1,0), nrow=1, byrow = TRUE))
(D = matrix(data = c(2,1), nrow=1, byrow = TRUE))
# SECONDA MATRICE
(N = matrix(data = c(1,-1,0,1,0,0,1,-1,0,1), ncol=2, byrow = TRUE))
(E = matrix(data = c(1,-1,0,1,0,0), ncol=2, byrow=TRUE))
(G = matrix(data = c(1,-1,0,1), ncol=2, byrow=TRUE))
#PRIMA MATRICE
(M)
#SECONDA MATRICE
(N)
(p=M %*% N)
(MperN = matrix(data = c("AxE + BxG", "CxE + DxG")))
(a = A %*% E)   #prodotto scalare
(b = B %*% G)   #prodotto scalare
(e = a + b) #somma element-wise
(c = C %*% E)   #prodotto scalare
(d = D %*% G)   #prodotto scalare
(g = c + d) #somma element-wise
(MperN = matrix(data = c(e,g), ncol=2))
all((MperN == p))
c(e,g)
e
g
c(e,g)
(MperN = rbind(e,g))
2 * MperN
