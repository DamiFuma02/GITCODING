;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |Problema 3|) (read-case-sensitive #t) (teachpacks ((lib "drawings.ss" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "drawings.ss" "installed-teachpacks")) #f)))
;; PARTE 1

;; PROCEDURA PER DETERMINARE SE IL NUMERO È FRAZIONARIO

(define frazionario?
  (lambda (str)    ;;str: stringa
    (let ((k (string-length str)))
      ;; se la stringa è vuota, restituisco 0
      (if (string=? str "")
          false
          ;; altrimenti, verifico se il primo carattere è un punto
          (if (char=? (string-ref str 0) #\.)
          true
          ;; se non è il punto, richiamo la procedura spostandomi di una posizione a destra
          (frazionario? (substring str 1 k))
          )
      )
    )))

;; PROCEDURA PER VERIFICARE SE IL NUMERO È NEGATIVO

(define negativo?
  (lambda (str)    ;;str: stringa
    ;; vedo se il primo carattere è il segno -
    (if(char=? (string-ref str 0) #\-)
       true
       false
    )
  ))

;; PROCEDURA PER VERIFICARE LA PRESENZA E RIMUOVERE L'EVENTUALE SEGNO + O -

(define segno
  (lambda (str)   ;; str: stringa
    (if(or(char=? (string-ref str 0) #\+)(char=? (string-ref str 0) #\-))
       ;; se vero rimuovo il primo carattere
       (substring str 1 (string-length str))
       ;; se falso mantengo la stringa iniziale
       str
    )
  ))


;; PROCEDURA DI SUPPORTO CON LA POSIZIONE DEL PUNTO INIZIALIZZATA A 0

(define punto
  (lambda (str)
    (punto-privata str 0)
))

;; PROCEDURA PER DETERMINARE LA POSIZIONE DEL PUNTO

(define punto-privata
  (lambda (str pos)   ;;str: stringa
    ;; verifico se il primo carattere è un punto
    (if(char=? (string-ref str 0) #\.)
       ;; se vero restituisco la posizione del punto
       pos
       ;; se falso richiamo la procedura spostandomi di una posizione a destra
       (punto-privata (substring str 1 (string-length str)) (+ pos 1)) 
       )
  ))

;; PROCEDURA "PUBBLICA" CON LA VARIABILE PER SALVARE LA SOMMA PROGRESSIMA INIZIALIZZATA A 0

(define parte-intera
  (lambda (str)
    (parte-intera-privata str 0)
  ))

;; PROCEDURA PER CALCOLARE LA PARTE INTERA

(define parte-intera-privata
  (lambda (str sum)
    (let ((k (string-length str)))
      ;; verifico se la stringa è vuota
      (if (string=? str "")
          ;; se vero, restituisco il risultato della somma
          sum
          ;; se falso, controllo se la prima cifra è 1
          (if (string=? (substring str 0 1) "1")
              ;; se vero, converto in decimale (elevando 2 al numero di cifre del numero) e sommo ricorsivamente passando alla procedura la stringa senza il primo carattere
              (+ sum (+ (expt 2 (- k 1)) (parte-intera (substring str 1))))
              ;; se falso, richiamo la procedura passando  la stringa senza il primo carattere
              (parte-intera (substring str 1))
          )
      )
  )))

;; PROCEDURA "PUBBLICA" CON LA VARIABILE PER SALVARE LA SOMMA PROGRESSIVA INIZIALIZZATA A 0

(define parte-fraz 
  (lambda (str) 
    (parte-fraz-privata str 0)
  ))

;; PROCEDURA PARTE FRAZIONARIA

(define parte-fraz-privata
  (lambda (str sum)
    (let ((k (string-length str)))
      ;; verifico se la stringa è vuota
      (if (string=? str "")
          ;; se vero restituisco il risultato della somma
          sum
          ;; se falso, verifico se l'ultima cifra è 1
          (if (string=? (substring str (- k 1)) "1")
               ;; se vero, converto in decimale (elevando 2 al numero di cifre del numero) e sommo ricorsivamente passando alla procedura la stringa senza l'ultimo carattere
              (+ sum (+ (expt 2 (- k)) (parte-fraz (substring str 0 (- k 1)))))
               ;; se falso, richiamo la procedura passando  la stringa senza il primo carattere
              (parte-fraz (substring str 0 (- k 1)))))
    )))

;; PROCEDURA FINALE

(define bin-rep->number
  (lambda (str)
    ;; rimuovo il segno al numero di partenza 
    (let ((num (segno str)))
    ;; verifico se la stringa è vuota
    (if (string=? str "")
        ;; se vero, restituisco la stringa vuota 
        ""
        ;; se falso, verifico se il numero è frazionario
        (if (frazionario? num)
          ;; se vero (è frazionario) verifico se il numero di partenza (con il segno) è negativo
          (if (negativo? str)
              ;; se vero (è negativo) sommo parte intera e parte frazionaria (anteponendo il segno -)
              ;; alla procedura parte-intera passo la stringa alla posizione 0 alla posizione del punto
              ;; alla procedura parte-fraz passo la stringa dalla posizione dopo il punto fino alla fine della stringa
              (- (+ (parte-intera (substring num 0 (punto num))) (parte-fraz (substring num (+ (punto num) 1)))))
              ;; se falso (è positivo) sommo parte intera e frazionaria (senza anteporre nessun segno)
              (+ (parte-intera (substring num 0 (punto num))) (parte-fraz (substring num (+ (punto num) 1))))
          )
          ;; se falso (non è frazionario) converto in decimale subito
          (parte-intera num)
        )
    )
)))





;; PARTE 2

;; PROCEDURA PER DETERMINARE LA BASE

(define base              ; val: intero
  (lambda (b)             ; b: stringa
    (string-length b)
    )
  )

;; PROCEDURA "PUBBLICA" CON LA VARIABILE PER SALVARE LA SOMMA PROGRESSIVA INIZIALIZZATA A 0

(define parte-fraz-base 
  (lambda (b str) 
    (parte-fraz-base-privata b str 0)
  ))

;; PROCEDURA PARTE FRAZIONARIA

(define parte-fraz-base-privata
  (lambda (b str sum)
    (let ((k (string-length str))
          (B (base b)))
      ;; verifico se la stringa è vuota
      (if (string=? str "")
          ;; se vero restituisco il risultato della somma
          sum
          ;; se falso, verifico se l'ultima cifra è 1
          (if (string=? (substring str (- k 1)) "1")
               ;; se vero, converto in decimale (elevando 2 al numero di cifre del numero) e sommo ricorsivamente passando alla procedura la stringa senza l'ultimo carattere
              (+ sum (+ (expt B (- k)) (parte-fraz-base b (substring str 0 (- k 1)))))
               ;; se falso, richiamo la procedura passando  la stringa senza il primo carattere
              (parte-fraz-base b (substring str 0 (- k 1)))))
    )))

;; PROCEDURA "PUBBLICA" CON LA VARIABILE PER SALVARE LA SOMMA PROGRESSIMA INIZIALIZZATA A 0

(define parte-intera-base
  (lambda (b str)
    (parte-intera-base-privata b str 0)
  ))

;; PROCEDURA PER CALCOLARE LA PARTE INTERA

(define parte-intera-base-privata
  (lambda (b str sum)
    (let ((k (string-length str))
          (B (base b)))
      ;; verifico se la stringa è vuota
      (if (string=? str "")
          ;; se vero, restituisco il risultato della somma
          sum
          ;; se falso, controllo se la prima cifra è 1
          (let ((c (valCifra b (substring str 0 1))))
            (if (string=? (substring str 0 1) "1")
                ;; se vero, converto in decimale (elevando 2 al numero di cifre del numero) e sommo ricorsivamente passando alla procedura la stringa senza il primo carattere
                (+ sum (+ ((* valCifra (expt B (- k 1)))) (parte-intera-base b (substring str 1))))
                ;; se falso, richiamo la procedura passando  la stringa senza il primo carattere
                (parte-intera-base b (substring str 1))
            )
         )
      )
  )))

;Procedura per la ricerca del simbolo corrispondente
(define b-val             ; val: stringa contente il carattere da convertire
  (lambda (b num)         
    (if (string=? (substring b 0 1) num)  ;confronto finchè non trovo il carattere in b
        (substring b 0 1)
        (b-val (substring b 1) num))
    )
  )
;Procedura per la ricerca della posizione del simbolo corrispondente 
(define pos-b-val         ; val: intero 
    (lambda (b num pos)   ; b:simboli della base  num: carattere da cercare pos: posizione di num in b --> valore di num
      (let ((n (b-val b num)) 
            )
      (if (string=? (substring b 0 1) n) ;confronto finchè non trovo n
          pos                            ; se trovo ritorno posizione
          (pos-b-val (substring b 1) num (+ pos 1)))
        )
      ) 
  )

  (define rep->number
  (lambda (b str)
    ;; rimuovo il segno al numero di partenza 
    (let ((num (segno str)))
    ;; verifico se la stringa è vuota
    (if (string=? str "")
        ;; se vero, restituisco la stringa vuota 
        ""
        ;; se falso, verifico se il numero è frazionario
        (if (frazionario? num)
          ;; se vero (è frazionario) verifico se il numero di partenza (con il segno) è negativo
          (if (negativo? str)
              ;; se vero (è negativo) sommo parte intera e parte frazionaria (anteponendo il segno -)
              ;; alla procedura parte-intera passo la stringa alla posizione 0 alla posizione del punto
              ;; alla procedura parte-fraz passo la stringa dalla posizione dopo il punto fino alla fine della stringa
              (- (+ (parte-intera-base b (substring num 0 (punto num))) (parte-fraz-base b (substring num (+ (punto num) 1)))))
              ;; se falso (è positivo) sommo parte intera e frazionaria (senza anteporre nessun segno)
              (+ (parte-intera-base b (substring num 0 (punto num))) (parte-fraz-base b (substring num (+ (punto num) 1))))
          )
          ;; se falso (non è frazionario) converto in decimale subito
          (parte-intera-base b num)
        )
    )
)))




;; PROVE PER VERIFICARE IL FUNZIONAMENTO DEL PROGRAMMA
;; (bin-rep->number "+1101") → 13
;; (bin-rep->number "0") → 0
;; (bin-rep->number "10110.011") → 22.375
;; (bin-rep->number "-0.1101001") → -0.8203125