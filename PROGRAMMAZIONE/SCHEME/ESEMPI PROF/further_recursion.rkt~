
;; Moltiplicazione Egizia


(define egyptian-multiplication       ; valore: intero
  (lambda (m n)                       ; m, n: interi non negativi
    (table-proc n (list 1) (list m))
    ))


;; Costruzione della tabella:
;; Liste = colonne

(define table-proc                    ; valore: intero
  (lambda (n y x)                     ; n: intero; x, y: liste
    (if (> (car y) n)
        (table-sum n 0 (cdr y) (cdr x))
        (table-proc n (cons (* 2 (car y)) y) (cons (* 2 (car x)) x))
        )))


(define table-sum                     ; valore: intero
  (lambda (n z y x)                   ; n: intero; x, y: liste
    (cond ((= z n)
           0)
          ((> (+ z (car y)) n)
           (table-sum n z (cdr y) (cdr x)))
          (else
           (+ (car x) (table-sum n (+ z (car y)) (cdr y) (cdr x))))
          )))




;; Problema generalizzato della Torre di Hanoi
;;
;; Rappresentazione di una configurazione generica:  (d1 d2 ... dk)
;;
;; lista delle posizioni (asticelle) dei dischi, a partire da quello
;; di diametro maggiore, e via via in ordine decrescente di diametro.


;; Numero di mosse

(define number-of-moves               ; valore: intero
  (lambda (cfg dst)                   ; cfg: lista, dst: {1, 2, 3} (posizioni)
    (if (null? cfg)
        0
        (let ((b (car cfg)))          ; b: posizione del disco piu' grande
          (if (= b dst)
              (number-of-moves (cdr cfg) dst)
              (+
               (number-of-moves (cdr cfg) (other b dst))
               1
               (number-of-moves (tower (other b dst) (- (length cfg) 1)) dst)
               ))
          ))
    ))


;; Date due posizioni (asticelle), individuazione della terza

(define other                         ; valore: {1, 2, 3}
  (lambda (x y)                       ; x, y: {1, 2, 3}
    (- 6 (+ x y))                     ; aritifizio
    ))


;; Rappresentazione di una mossa


;; Torre di n dischi in posizione (asticella) data

(define tower                         ; valore: lista di posizioni
  (lambda (x n)                       ; z: {1, 2, 3}, n: intero non negativo
    (if (= n 0)
        null
        (cons x (tower x (- n 1)))
        )))

