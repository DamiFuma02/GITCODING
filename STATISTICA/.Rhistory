}
if (mean(Y-mean(Y))==0) {
print("TEOREMA BARICENTRO CONFERMATO")
}
mean(Y) == sum(Y)/length(Y)
(FY = data.frame(table(Y)))
1/length(Y) * sum(FY$Y*FY$Freq) == mean(Y)
FY[1]
sum(FY[1]*FY[2])
sum(FY[1]%*%FY[2])
FY[1]*FY[2]
FY[1]%*%FY[2]
i=1
FY[i,1]*FY[i,2]
typeof(FY)
spec(FY)
FY[1]+FY[2]
FY
mutate(FY,Y=integer(Y))
library("dplyr")
library("ggplot2")
mutate(FY,Y=integer(Y))
mutate(FY,Y=unlist(lapply(Y,integer)))
unlist(lapply(Y,integer))
Y = mtcars$mpg
Y
(FY = data.frame(table(Y)))   #tabella delle frequenze assoulute fi
Y = mtcars$cyl
mean(Y)
Y = mtcars$mpg
mean(Y)
mean(Y) == sum(Y)/length(Y)
(FY = data.frame(table(Y)))   #tabella delle frequenze assoulute fi, i in [1,|Sy|]
FY[1,1]
FY[1,1]+F[1,2]
F[1,2]
FY[1,2]
FY[1,1]*FY[1,2]
integer(FY[1,1])*FY[1,2]
integer(FY[1,1])
table(mtcars$cyl)
table(mtcars$cyl)/length(mtcars$cyl)
?quantile
quantile(Y,probs = c(0.25,0.25,0.75))
Y = mtcars$cyl
quantile(Y,probs = c(0.25,0.25,0.75))
quantile(Y,probs = c(0.25,0.5,0.75))
Y = mtcars$mpg
table(Y)   # frequenze assolute fi per ogni yi in Sy
Y = mtcars$mpg
quantile(Y,probs = c(0.25,0.5,0.75))
table(Y)/length(Y)   # frequenze relative pi in Sy
data.frame(quantile(Y,probs = c(0.25,0.5,0.75)))
data.frame(table(Y)/length(Y)   # frequenze relative pi in Sy
data.frame(table(Y)/length(Y))   # frequenze relative pi in Sy
data.frame(table(Y)/length(Y))   # frequenze relative pi in Sy
data.frame(cumsum(table(Y)/length(Y)))
data.frame(quantile(Y,probs = c(0.25,0.5,0.75)))
data.frame(cumsum(table(Y)/length(Y)))
Y = mtcars$mpg
Y = mtcars$mpg
mean(Y)
mean(Y) == sum(Y)/length(Y)
head(FY = data.frame(table(Y)))   #tabella delle frequenze assoulute fi, i in [1,|Sy|]
Y = mtcars$mpg
length(Y)
length(Y)%%2==0
median(Y)
Y = mtcars$mpg
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i],Y[j],median(Y))
}
Y[i]
Y[j]
median(Y)
Y = mtcars$mpg
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i],Y[j],median(Y))
}
Y = mtcars$mpg
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i],",",Y[j],",",median(Y))
}
Y = mtcars$mpg
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i])
print(Y[j])
print(median(Y))
}
Y = mtcars$hp
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i])
print(Y[j])
print(median(Y))
}
quantile(Y,0.5)
Y = mtcars$hp
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i])
print(Y[j])
print(median(Y))
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
print(Y[i])
print(median(y))
quantile(Y,0.5)
}
Y = mtcars$disp
n = length(Y)
Y = airquality$Ozone
n = length(Y)
Y = airquality$Ozone
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
Y[i]
Y[j]
median(Y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
Y[i]
median(y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = airquality$Ozone
Y=sort(Y)
n = length(Y)
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
Y[i]
Y[j]
median(Y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
Y[i]
median(y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
n = length(Y)
(n = length(Y))
library("dplyr")
library("ggplot2")
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
library("nycflights13")
library("ggplot2")
Y = nycflights13::flights$year
(n = length(Y))
Y = nycflights13::airports$alt
(n = length(Y))
Y = nycflights13::planes$speed
(n = length(Y))
Y = dim(nycflights13::airlines)
dim(nycflights13::airlines)
dim(nycflights13::airports)
dim(nycflights13::flights)
dim(nycflights13::planes)
dim(nycflights13::weather)
Y = nycflights13::weather$year
Y=sort(Y)
(n = length(Y))
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
Y[i]
Y[j]
median(Y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
Y[i]
median(y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = nycflights13::weather$year
Y=sort(Y)
(n = length(Y))
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
Y[i]
Y[j]
median(Y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
print(Y[i])
print(median(y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = nycflights13::weather$year
Y=sort(Y)
(n = length(Y))
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
Y[i]
Y[j]
median(Y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
print(Y[i])
print(median(Y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = nycflights13::airports$lat
Y = nycflights13::airports$lat
Y=sort(Y)
(n = length(Y))
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i])
print(Y[j])
print(median(Y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
print(Y[i])
print(median(Y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = nycflights13::airports$lat
Y=sort(Y)
(n = length(Y))
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i])
print(Y[j])
print(median(Y))
# confronto con valore medio tra i due estremi
(Y[i]+Y[j])/2 == median(Y)
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
print(Y[i])
print(median(Y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = nycflights13::airports$lat
Y=sort(Y)
(n = length(Y))
if (n%%2==0){
print("N PARI, MEDIANA POSSIEDE DUE INDICI")
i=n/2
j=n/2 + 1
print(Y[i])
print(Y[j])
print(median(Y))
# confronto con valore medio tra i due estremi
print((Y[i]+Y[j])/2 == median(Y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
} else {
print("N DISPARI, MEDIANA UNICO VALORE")
i=(n+1)/2
print(Y[i])
print(median(Y))
print("MEDIANA = QUANTILE LIVELLO 0.5")
quantile(Y,0.5)
}
Y = mtcars$mpg
# frequenze assolute fi per ogni yi in Sy
table(Y)
# frequenze relative pi in Sy
table(Y)/length(Y)
# frequenze relative cumulate
data.frame(cumsum(table(Y)/length(Y)))
# QUARTILI
data.frame(quantile(Y,probs = c(0.25,0.5,0.75)))
median(Y) == quantile(Y,0.5)
?geom_qq
library("dplyr")
library("ggplot2")
ggplot(mtcars) + geom_qq(aes(mtcars$mpg,mtcars$hp))
ggplot(mtcars, aes(sample = mpg))
ggplot(mtcars, aes(sample = mpg)) + stat_qq() + stat_qq_line()
ggplot(mtcars, aes(sample = mpg)) + stat_qq()
spec(mtcars)
colnames(mtcars)
?mtcars
ggplot(mtcars,aes(mpg, wt, colour = cyl)) +  geom_point()
# frequenze relative cumulate
relCumFreq = data.frame(cumsum(table(Y)/length(Y)))
relCumFreq
colnameS(relCumFreq)
colnames(relCumFreq)
# frequenze relative cumulate
relCumFreq = data.frame(y = unique(Y),P = cumsum(table(Y)/length(Y)))
relCumFreq
# frequenze relative cumulate
relCumFreq = data.frame(y = sort(unique(Y)),P = cumsum(table(Y)/length(Y)))
relCumFreq
ggplot(relCumFreq,aes(P, y)) +  geom_point() + geom_segment(aes(xend = P, yend = y))
ggplot(relCumFreq,aes(P, y)) +  geom_point() + geom_segment(aes(xend = P, yend = y))
ggplot(relCumFreq,aes(P, y)) +  geom_point() + geom_segment(aes(xend = P, yend = y)) + geom_line(quantile(Y,c(0.25,0.5,0.75)))
ggplot(relCumFreq,aes(P, y)) +  geom_point() + geom_segment(aes(xend = P, yend = y)) + geom_line(aes(quantile(Y,c(0.25,0.5,0.75))))
# QUARTILI
data.frame(quantile(Y,probs = c(0.25,0.5,0.75)))
# QUARTILI
quartili = data.frame(q = quantile(Y,probs = c(0.25,0.5,0.75)))
quartili
qqnorm(Y)
grid()               # griglia
qqline(Y,
lwd = 2,      # spessore
col = "red"   # colore
)
ggplot(data = mtcars, aes(sample = mpg)) +
geom_qq(color = "dark blue") +
geom_qq_line(color = "orange") +
labs(y = "Miles Per Gallon")
boxplot(mtcars$mpg)
geom_boxplot(mtcars$mpg)
geom_boxplot(aes(mtcars$mpg))
ggplot(mtcars)+ geom_boxplot(aes(mpg))
ggplot(mtcars)+ geom_boxplot(aes(mpg,wt))
ggplot(mtcars)+ geom_boxplot(aes(mpg,group=cyl))
Y = mtcars$hp
mode(Y)
Y = mtcars$mpg
FY = table(f = Y)
FY
Y = mtcars$cyl
FY = table(f = Y)
FY
FY = table(Y)
FY[1]
typeof(FY[1])
length(FY[1])
FY[[1]]
F[2,]
F[2]
F[1]
FY[1]
FY[2]
FY[2,]
Y = mtcars$cyl
FY = table(Y)
FY[[1]] # Frequenza i-esima  per i=1
moda <- function(v) {
tmp <- unique(v)
uniqv[which.max(tabulate(match(v, tmp)))]
}
Ymo = moda(Y)
which.max(tabulate(match(FY, tmp)))
which.max(tabulate(match(v, tmp)))
v = FY
tmp <- unique(v)
which.max(tabulate(match(v, tmp)))
tmp
cylFreqTable
Ymo = (cylFreqTable %>% filter(frequency== max(cylFreqTable$frequency)))$cyl
Ymo
cylFreqTable
cylFreqTable["frequency"==max(cylFreqTable$frequency)]
cylFreqTable[cylFreqTable$frequency==max(cylFreqTable$frequency)]
max(cylFreqTable$frequency)
cylFreqTable[cylFreqTable$frequency==max(cylFreqTable$frequency),"cyl"]
boxplot(mtcars$mpg)
boxplot(Y) + line(x=quantile(Y,0.75))
boxplot(Y)  line(x=quantile(Y,0.75))
boxplot(Y)
line(x=quantile(Y,0.75))
ggplot(mtcars,aes(x=Y)) + geom_boxplot()
Y = mtcars$mpg
ggplot(mtcars) + geom_boxplot(aes(x=Y))
ggplot(mtcars) + geom_boxplot(aes(x=mtcars$mpg))
ggplot(mtcars) + geom_boxplot(aes(x=mpg))
ggplot(mtcars) + geom_boxplot(aes(x=mpg)) + labs(y="Miles Per Gallon")
ggplot(mtcars) + geom_boxplot(aes(x=mpg)) + labs(x="Miles Per Gallon")
quantile(Y,0.75)
quantile(Y,0.75)-1
quantile(Y,0.75)-1
quantile(Y,0.75)-1
quantile(Y,0.75)
quantile(Y,0.75)-quantile(Y,0.25)
Y = mtcars$mpg
ggplot(mtcars) + geom_boxplot(aes(x=mpg)) + labs(x="Miles Per Gallon")
quantile(Y,0.75)
quantile(Y,0.25)
head(mtcars)
head(mtcars)
hp6Cyl = mtcars %>% filter(cyl == 6) %>% select(hp)
library("dplyr")
library("dplyr")
head(mtcars)
hp6Cyl = mtcars %>% filter(cyl == 6) %>% select(hp)
head(hp6Cyl)
head(mtcars)
hp6Cyl = mtcars %>% filter(cyl == 6) %>% select(hp)
head(hp6Cyl)
length(hp6Cyl)
head(mtcars)
hp6Cyl = mtcars %>% filter(cyl == 6) %>% select(hp)
head(hp6Cyl)
ncol(hp6Cyl)
head(hp6Cyl)
mtcars["cyl"==6,"hp"]
mtcars[mtcars$cyl==6,"hp"]
attitudine <- rbind(cbind(rep("S",1),rep("S",1)),cbind(rep("S",3),rep("B",3)),cbind(rep("B",1),rep("S",1)),cbind(rep("B",3),rep("B",3)),cbind(rep("B",2),rep("O",2)),cbind(rep("O",2),rep("S",2)),cbind(rep("O",1),rep("B",1)),cbind(rep("O",2),rep("O",2)))
attitudine <- as.data.frame(attitudine) # matrice trasformata
# in data frame
colnames(attitudine) <- c("X","Y") # nomi delle colonne
attitudine$X <- ordered(attitudine$X, levels=c("S","B","O"))
attitudine$Y <- ordered(attitudine$Y, levels=c("S","B","O"))
str(attitudine)
margin.table(tab,1)
attitudine <- rbind(cbind(rep("S",1),rep("S",1)),cbind(rep("S",3),rep("B",3)),cbind(rep("B",1),rep("S",1)),cbind(rep("B",3),rep("B",3)),cbind(rep("B",2),rep("O",2)),cbind(rep("O",2),rep("S",2)),cbind(rep("O",1),rep("B",1)),cbind(rep("O",2),rep("O",2)))
attitudine <- as.data.frame(attitudine) # matrice trasformata
# in data frame
colnames(attitudine) <- c("X","Y") # nomi delle colonne
attitudine$X <- ordered(attitudine$X, levels=c("S","B","O"))
attitudine$Y <- ordered(attitudine$Y, levels=c("S","B","O"))
str(attitudine)
tab <- table(attitudine$X,attitudine$Y) # tabella di contingenza
#(distribuzione di frequenza assoluta congiunta)
tab
margin.table(tab,1)
attitudine <- rbind(cbind(rep("S",1),rep("S",1)),cbind(rep("S",3),rep("B",3)),cbind(rep("B",1),rep("S",1)),cbind(rep("B",3),rep("B",3)),cbind(rep("B",2),rep("O",2)),cbind(rep("O",2),rep("S",2)),cbind(rep("O",1),rep("B",1)),cbind(rep("O",2),rep("O",2)))
attitudine <- as.data.frame(attitudine) # matrice trasformata
# in data frame
colnames(attitudine) <- c("X","Y") # nomi delle colonne
attitudine$X <- ordered(attitudine$X, levels=c("S","B","O"))
attitudine$Y <- ordered(attitudine$Y, levels=c("S","B","O"))
str(attitudine)
tab <- table(attitudine$X,attitudine$Y) # tabella di contingenza
#(distribuzione di frequenza assoluta congiunta)
tab
margin.table(tab,2)
margin.table(tab,3)
attitudine <- rbind(cbind(rep("S",1),rep("S",1)),cbind(rep("S",3),rep("B",3)),cbind(rep("B",1),rep("S",1)),cbind(rep("B",3),rep("B",3)),cbind(rep("B",2),rep("O",2)),cbind(rep("O",2),rep("S",2)),cbind(rep("O",1),rep("B",1)),cbind(rep("O",2),rep("O",2)))
attitudine <- as.data.frame(attitudine) # matrice trasformata
# in data frame
colnames(attitudine) <- c("X","Y") # nomi delle colonne
attitudine$X <- ordered(attitudine$X, levels=c("S","B","O"))
attitudine$Y <- ordered(attitudine$Y, levels=c("S","B","O"))
str(attitudine)
tab <- table(attitudine$X,attitudine$Y) # tabella di contingenza
#(distribuzione di frequenza assoluta congiunta)
tab
margin.table(tab,3)
margin.table(tab,1)
#(distribuzione di frequenza assoluta congiunta)
tab
