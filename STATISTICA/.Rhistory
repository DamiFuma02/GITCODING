c(1,2,3,4)
Random()
Random
(j = runif(1,1,4))
(j = floor(runif(1,1,4)))
(j = floor(runif(1,1,4)))
(j = floor(runif(1,1,4)))
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(J = length(Sy)) # LUNGHEZZA DEL SUPPORTO
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
Sy = c(10, 20, 30, 40)  # SUPPORTO DELLA VARIABILE Y
(J = length(Sy)) # LUNGHEZZA DEL SUPPORTO
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
(J = length(Sy)) # LUNGHEZZA DEL SUPPORTO
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
?runif
head(mtcars)
head(mtcars[,1:4])
head(mtcars)
spec(mtcars)
summary(mtcars)
colnames(mtcars)
data("mtcars")
data("mtcars")
head(mtcars)
View(mtcars)
head(mtcars)
Sy = c(10, 20, 30, 40)  # SUPPORTO DELLA VARIABILE Y
(J = length(Sy)) # LUNGHEZZA DEL SUPPORTO
(j = floor(runif(1,1,J+1)))  #indice j ∈ [1,J]
head(mtcars)
# SCEGLIAMO LA VARIABILE CYL
Scyl = fac  # SUPPORTO DELLA VARIABILE Y
factor(mtcars)
factor(mtcars$cyl)
Y = mtcars$cyl  # SCEGLIAMO LA VARIABILE Y = mtcars$cyl
(SY = levels(factor(Y)))  # SUPPORTO DELLA VARIABILE Y
(SY = unique(Y))  # SUPPORTO DELLA VARIABILE Y
table(Y)
count(Y)
?count
??count
library("dplyr")
install.packages("dplyr")
library("dplyr")
summarise(Y)
group_by(mtcars,cyl) %>% summarise(frequency = n())
length(Y)
(cylFreqTable = group_by(mtcars,cyl) %>% summarise(frequency = n())  )
head(mtcars)
Y = mtcars$cyl  # SCEGLIAMO LA VARIABILE Y = mtcars$cyl
(SY = unique(Y))  # SUPPORTO DELLA VARIABILE Y
(J = length(Sy))   # LUNGHEZZA DEL SUPPORTO
(N = length(Y))     # NUMERO DI UNITÀ STATISTICHE
(cylFreqTable = group_by(mtcars,cyl) %>% summarise(frequency = n())  )
sum(cylFreqTable$frequency) == N
levels(factor(mtcars$mpg))
length(levels(factor(mtcars$mpg)))
# ci sono tanti possibili valori ammessi da mpg (Miles Per Gallon)
range(mtcars$mpg)
Sy = levels(factor(mtcars$mpg))
length(Sy)
2^4
split(mtcars$mpg,length(Sy)^0.5)
?split
Sy = levels(factor(mtcars$mpg))
length(Sy)
# ci sono tanti possibili valori ammessi da mpg (Miles Per Gallon)
range(mtcars$mpg)
split(sort(Sy),length(Sy)^0.5)
length(Sy)^0.5
split(sort(Sy),(length(Sy)^0.5))
# ci sono tanti possibili valori ammessi da mpg (Miles Per Gallon)
(mpgRange = max(mtcars$mpg)-min(mtcars$mpg) )# ==> range(mtcars$mpg)
(intervalSize = mpgRange / length(Sy)^0.5 )
split(mtcars$mpg, cut(mtcars$mpg, 5, labels = FALSE))
split(mtcars$mpg, cut(mtcars$mpg, length(Sy), labels = TRUE))
split(mtcars$mpg, cut(mtcars$mpg, length(Sy), labels = FALSE))
split(mtcars$mpg, cut(mtcars$mpg, length(Sy)^0.5, labels = FALSE))
(classSupport = split(mtcars$mpg, cut(mtcars$mpg, length(Sy)^0.5, labels = FALSE)) )
table(classSupport)
?cut
(classSupport = split(mtcars$mpg, cut(mtcars$mpg, length(Sy)^0.5)) )
colnames(classSupport)
names(classSupport)
cut(mtcars$mpg, length(Sy)^0.5)
(classSupport = split(mtcars$mpg, cut(mtcars$mpg, length(Sy)^0.5)) )
(classList = split(mtcars$mpg, cut(mtcars$mpg, length(Sy)^0.5)) )
classList %>% group_by(names(classList))
classList %>% count(names(classList))
?data.frame
classList[names(classList)]
classList[name in names(classList)]
classList[name of names(classList)]
classList[names(classList)[1]]
classList[names(classList)[1],]
classList[,names(classList)[1]]
classList[[names(classList)[1]]]
classList[[names(classList)]]
classFreqTable = data.frame(
class = names(classList),
freq = length( classList[[names(classList)]])
)
classFreqTable = data.frame(
class = names(classList),
freq = length( classList[[class]])
)
classFreqTable = data.frame(
classe = names(classList),
freq = length( classList[[classe]])
)
classFreqTable = data.frame(
"classe" = names(classList),
"freq" = length( classList[[names(classList)]])
)
classFreqTable = data.frame(
"classe" = names(classList),
"freq" = lapply(classList, length)
)
classFreqTable
classFreqTable = data.frame(
names(classList),
lapply(classList, length)
)
classFreqTable
classFreqTable = data.frame(
names(classList),
unlist(lapply(classList, length))
)
classFreqTable
(classFreqTable = data.frame(
"class"=names(classList),
"freq"= unlist(lapply(classList, length))
))
(classFreqTable = data.frame(
"freq"= unlist(lapply(classList, length))
))
sum(classFreqTable$freq) == length(mtcars)
sum(classFreqTable$freq) == length(mtcars$mpg)
(cylRelFreqTable = table(mtcars$cyl))
(cylRelFreqTable = table(mtcars$cyl)/length(mtcars$cyl))
(cylRelFreqTable = table(mtcars$cyl)/length(mtcars$cyl)*100)
cylRelFreqTable[1]
cylRelFreqTable[1,]
cylRelFreqTable[[1]]
cylRelFreqTable[[1]]/100 * length(mtcars$cyl) == cylFreqTable[[1]]
cylFreqTable[[1]]
cylFreqTable
(cylRelFreqTable = table(mtcars$cyl)/length(mtcars$cyl)*100)  # *100 finale serve a mostrare i valori percetuali della frequenza relativa
cylRelFreqTable[4]
cylRelFreqTable[[1]]
cylFreqTable
cylFreqTable[cyl==4]
cylRelFreqTable[[1]]/100 * length(mtcars$cyl) == cylFreqTable %>% filter(cyl==4)
cylFreqTable %>% filter(cyl==4)
cylFreqTable %>% filter(cyl==4)$frequency
cylFreqTable[cylFreqTable$cyl==4]
cylFreqTable[cylFreqTable$cyl==4,]
cylFreqTable[cylFreqTable$cyl==4,]$frequency
cylRelFreqTable[[1]]/100 * length(mtcars$cyl) == cylFreqTable[cylFreqTable$cyl==4,]$frequency
cumsum(mtcars$cyl)
mtcars$cyl
cumsum(table(ChickWeight$Diet))
cumsum(table(mtcars$cyl))
cumsum(table(rev(mtcars$cyl)))
cumsum(table(mtcars$cyl))    # FREQUENZE CUMULATE
cumsum(table(rev(mtcars$cyl)))
cumsum(table(mtcars$cyl))    # FREQUENZE CUMULATE
cumsum(table(mtcars$cyl))    # FREQUENZE CUMULATE
cumsum(rev(table(mtcars$cyl)))
cumsum(table(mtcars$cyl))    # FREQUENZE CUMULATE
cumsum(rev(table(mtcars$cyl)))
cylFreqTable
nrow(cylFreqTable)
cylCumFreq
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
cylCumFreq[1]
cylCumFreq[1,]
cylCumFreq[[1]]
cylCumFreq
cylCumFreq$'4'
names(cylFreqTable)
names(cylCumFreq)
names(cylCumFreq)[i]
cylFreqTable
cylCumFreq
cylCumFreq[names(cylCumFreq)[1]]
cylCumFreq[[names(cylCumFreq)[1]]]
cylFreqTable[names(cylCumFreq)[1]]
cylFreqTable[names(cylCumFreq)[1],]
cylFreqTable
strtoi("4")
strtoi(names(cylCumFreq)[1])
cylFreqTable[cylFreqTable$cyl == strtoi(names(cylCumFreq)[1]) ]
cylFreqTable[cylFreqTable$cyl == strtoi(names(cylCumFreq)[1]) ,]
cylFreqTable[cylFreqTable$cyl == strtoi(names(cylCumFreq)[1]) ,]$frequency
cylCumFreq[[names(cylCumFreq)[1]]] == cylFreqTable[cylFreqTable$cyl == strtoi(names(cylCumFreq)[1]) ,]$frequency
cylFreqTable
cylCumFreq
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
for(i in 1:nrow(cylFreqTable)){
cylCumFreq[[names(cylCumFreq)[1]]] == sum(cylFreqTable[1:i])
}
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
for(i in 1:nrow(cylFreqTable)){
cylCumFreq[[names(cylCumFreq)[1]]] == sum(cylFreqTable[1:i]$frequency)
}
cylFreqTable[1:2]
cylFreqTable[,1:2]
1:2
cylFreqTable[1:2,"frequency"]
cylFreqTable
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
for(i in 1:nrow(cylFreqTable)){
cylCumFreq[[names(cylCumFreq)[1]]] == sum(cylFreqTable[1:i,"frequency"])
}
cumsum(rev(table(mtcars$cyl)))
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
for(i in 1:nrow(cylFreqTable)){
cylCumFreq[[names(cylCumFreq)[i]]] == sum(cylFreqTable[1:i,"frequency"])
}
cumsum(rev(table(mtcars$cyl)))
cylFreqTable
1:nrow(cylFreqTable)
i=1
cylCumFreq[[names(cylCumFreq)[i]]] == sum(cylFreqTable[1:i,"frequency"])
cylCumFreq[[names(cylCumFreq)[i]]] == sum(cylFreqTable[1:i,"frequency"])
cylCumFreq[[names(cylCumFreq)[i]]] == sum(cylFreqTable[1:i,"frequency"])
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
for(i in 1:nrow(cylFreqTable)){
(cylCumFreq[[names(cylCumFreq)[i]]] == sum(cylFreqTable[1:i,"frequency"]))
}
for(i in 1:nrow(cylFreqTable)){
print(cylCumFreq[[names(cylCumFreq)[i]]] == sum(cylFreqTable[1:i,"frequency"]))
}
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
ok=TRUE
for(i in 1:nrow(cylFreqTable)){
if(cylCumFreq[[names(cylCumFreq)[i]]] != sum(cylFreqTable[1:i,"frequency"])){
ok = FALSE;
break;
}
}
print(ok)
cumsum(rev(table(mtcars$cyl)))
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
ok=TRUE
for(i in 1:nrow(cylFreqTable)){
if(cylCumFreq[[names(cylCumFreq)[i]]] != sum(cylFreqTable[1:i,"frequency"])){
ok = FALSE;
break;
}
}
if (ok) {
print("cumsum WORKS!!!")
} else {
print("SOMETHING IS WRONG!!!")
}
cumsum(rev(table(mtcars$cyl)))
cylCumFreq
cylFreqTable
(cylCumFreq[[1]] == cylFreqTable[1,"frequency"])
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
n = nrow(cylCumFreq) # = nrow(cylFreqTable)
if (   (cylCumFreq[[1]] == cylFreqTable[1,"frequency"]) &&
(cylCumFreq[[n-1]] == cylFreqTable[n-1,"frequency"])
) {
print("IPOTESI CONFERMATA")
}
n = nrow(cylCumFreq) # = nrow(cylFreqTable)
n
ll = nrow(cylCumFreq) # = nrow(cylFreqTable)
ll
ll = nrow(cylFreqTable)
ll
(cylCumFreq = cumsum(table(mtcars$cyl)))    # FREQUENZE CUMULATE
ll = nrow(cylFreqTable) # = nrow(cylFreqTable)
if (   (cylCumFreq[[1]] == cylFreqTable[1,"frequency"]) &&
(cylCumFreq[[ll-1]] == cylFreqTable[ll-1,"frequency"])
) {
print("IPOTESI CONFERMATA")
}
if (   (cylCumFreq[[1]] == cylFreqTable[1,"frequency"]) &&
(cylCumFreq[[ll-1]] == cylFreqTable[ll-1,"frequency"])
) {
print("IPOTESI CONFERMATA")
}
(cylCumFreq[[ll-1]] == cylFreqTable[ll-1,"frequency"])
cylCumFreq[[ll-1]]
cylCumFreq
cylFreqTable
cylCumFreq
cylFreqTable
ll = nrow(cylFreqTable) # = nrow(cylFreqTable)
cylCumFreq[[ll-1]]
ll-1
cylCumFreq
ll = nrow(cylFreqTable) # = nrow(cylFreqTable)
if (   (cylCumFreq[[1]] == cylFreqTable[1,"frequency"]) &&
(cylCumFreq[[ll]] == cylFreqTable[ll,"frequency"])
) {
print("IPOTESI CONFERMATA")
}
(cylCumFreq[[ll]] == cylFreqTable[ll,"frequency"])
cylCumFreq[[ll]]
cylFreqTable[ll,"frequency"]
if (   (cylCumFreq[[1]] == cylFreqTable[1,"frequency"]) &&
(cylCumFreq[[ll]] == N)
) {
print("IPOTESI CONFERMATA")
}
