<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CODIFICA</title>
    <link rel="stylesheet" href="/css/globalstyle.css">
    <link rel="stylesheet" href="/css/CodDig.css">
</head>
<body>
    
    <div class="title" id="title">
        <i id="pagelogo" class="fas fa-wave-square"></i>CODIFICA DIGITALE<a href="/archElab"><div class="homebutton"><i class="fas fa-home"></i><span>HOME</span></div></a>
    </div>
    
    <br>
    
    <div class="navtable">
        <div class="linkcell" onmouseleave="dropindex(0, false)"">
            <div class="container">
                <a onclick="showContent(0)" class="primarylink" href="#Digit"><img class="linkimg" src="/img/ARCH/digitalizzazione.jpg"  >Digitalizzazione</a><span class="dropButton"><i onclick="dropindex (0, true)" class="fas fa-angle-down"></i></span>
            </div>
            <ul class="indexdrop">
                <li><a href="#AnVSDig"><img src="/img/ARCH/segnali.png" alt=""> SEGNALI</a></li>
                <li><a href="#ADC"><img src="/img/ARCH/ADC.png" alt=""> ADC</a></li>
            </ul>
        </div>
        <div class="linkcell" onmouseleave=`dropindex(1, false)`>
            <div class="container">
                <a onclick="showContent(1)" class="primarylink" href="#SND"><img class="linkimg" src="/img/ARCH/sistemabinario.jpg" >Sistema Binario</a><span class="dropButton"><i onclick="dropindex (1, true)" class="fas fa-angle-down"></i></span>
            </div>
            <ul class="indexdrop">
                <li></li>
            </ul>
        </div>
        <div class="linkcell" onmouseleave=`dropindex(2, false)`>
            <div class="container">
                <a onclick="showContent(2)" class="primarylink" href="#Bool"><img class="linkimg" src="/img/ARCH/bool.png" >Algebra Booleana</a><span class="dropButton"><i onclick="dropindex (2, true)" class="fas fa-angle-down"></i></span>
            </div>
            <ul class="indexdrop">
                <li></li>
            </ul>
        </div>
        <div class="linkcell" onmouseleave=`dropindex(3, false)`>
            <div class="container">
                <a onclick="showContent(3)" class="primarylink" href="#Codifica"><img class="linkimg" src="/img/ARCH/codificaDigitale.png" >Codifica DATI</a><span class="dropButton"><i onclick="dropindex (3, true)" class="fas fa-angle-down"></i></span>
            </div>
            <ul class="indexdrop">
                <li></li>
            </ul>
        </div>
    </div>
    
    <nav class="navbar">
        <button><i id="navlogo" class="fas fa-bars"></i></button>
        
        <div id="index" >
            <button id="hideNav"><i class="fas fa-ban"></i>HIDE BAR</button>
            <a href="#title"><i class="fas fa-angle-double-up">PAGE TOP</i></a>
            <a onclick="showContent(0)" href="#ADC">Digitalizzazione</a>
            <a onclick="showContent(1)" href="#SND">Sistema Binario</a>
            <a onclick="showContent(2)" href="#Bool">Algebra Booleana</a>
            <a onclick="showContent(3)" href="#Codifica">Codifica dei DATI</a>
            <button id="hideAll" ><i class="fas fa-ban"></i>HIDE ALL</button>
            <div class="drop">
                <a  href="#CodificaNumeri">NUMERI</a>
                <a  href="#CodificaChar">CARATTERI TESTUALI</a>
                <a  href="#CodificaImg">IMMAGINI/VIDEO</a>
                <a  href="#ADC">SUONI</a>
            </div>
        </li>
    </div>
</nav>

<br><hr><br>


<div id="Digit" class="textContent">
    <h2  >SEGNALI INFORMATIVI</h2>
    
    <div class="content">
        <div id="analogico">
            <h1>ANALOGICO</h1>
            <figure>
                <img src="/img/ARCH/analogico.png">
                <figcaption><b>Variano in analogia con la grandezza fisica (Tensione o Corrente)</b></figcaption>
            </figure>
            <ul>
                <li>Possiedono un numero infinito di valori all'interno dell'intervallo di ampiezza</li>
                <li>Solitamente vengono rappresentati da un segnale sinusoidale</li>
                <li>Maggiormente soggetti all'influenza del <a href="#ADC">rumore</a></li>
            </ul>
        </div>
        <div id="digitale">
            <h1>DIGITALE</h1>
            <figure>
                <img src="/img/ARCH/digitale.png">
                <figcaption><b>Vengono rappresentati da cifre binarie (DIGIT)</b></figcaption>
            </figure>
            <ul>
                <li>Numero finito di valori all'interno dell'intervallo di ampiezza</li>
                <li>Rappresentati da un segnale onda quadra</li>
                <li><a href="#ADC">Quantizzazione</a> : definisce il numero di valori ammissibili</li>
            </ul>
            
        </div>
    </div>
    <div class="content">
        <h2 >Conversione Analogico Digitale</h2>
    </div>
    
    <hr>
</div>


<div  class="textContent" id="SND" >
    <h2 >Sistema Numerico Binario</h2>
    
    <div class="content">
        <figure >
            <img src="/img/ARCH/binario.png" > 
            <figcaption>
                Viene usata la notazione posizionale, perciò ogni cifra ha un'ordine di grandezza
            </figcaption>
        </figure>
    </div>
    <div class="content">
        <div  class="convert">
            <h1>CONVERTITORE DI BASI</h1>
            <input placeholder="Numero da convertire" type="number" name="Number" id="number">
            <input placeholder="Base Partenza (2-16)" type="number" name="StartBase" id="startBase">
            <input placeholder="Base Arrivo (2-16)" type="number" name="toBase" id="toBase">
            <button id="convertButton">CONVERTI</button>
            <input placeholder="Risultato" type="number" name="Result" id="Result">  
        </div>
    </div>
    <h2>Conversione di base numerica</h2>
    <div class="content">
        <div id="base10-2">
            <h1><b>Base 10 --> Base N</b></h1>
            <figure>
                <img src="/img/ARCH/Base10-2.png" >
                <img src="/img/ARCH/FRAZBase2-10.png">
                <figcaption>
                    <ul>
                        <li>Si divide il numero decimale per N fino a trovare 1 come risultato finale</li>
                        <li>Il resto della divisione corrisponde alla codifica del numero nella base scelta</li>
                        <li>I resti devono essere letti dal basso verso l'alto</li>
                    </ul>
                </figcaption>
            </figure>
        </div>
        <div id="base2-10">
            <h1><b>Base N --> Base 10</b></h1>
            <figure>
                <img src="/img/ARCH/Base2-10.png" >
                <figcaption>
                    <ul>
                        <li>Si sfrutta la notazione posizionale</li>
                        <li>N(i)10 = 2* N(i-1)10 + N(i)2</li>
                        <li>Risultato[i] = 2*Risultato_prec + BIT[i]</li>
                    </ul>
                </figcaption>
            </figure>
        </div>
        <div id="base2-2n">
            <h1><b>Base 2 --> Base 2^n</b></h1>
            <figure>
                <img src="/img/ARCH/Base2-N.png" >
                <figcaption>
                    <ul>
                        <li>
                            N bit = 1 cifra 
                        </li>
                        <li>
                            Il numero binario viene convertito in decimale e poi convertito in N
                        </li>
                    </ul>
                </figcaption>
            </figure>
        </div>
        <div id="base2n-2">
            <h1><b>Base 2^n a Base 2:</b></h1>
            <figure>
                <img src="/img/ARCH/Base2-N.png" >
                
                <figcaption>
                    <ul>
                        <li>1 cifra = N bit</li>
                        <li>Il numero viene convertito in binario seguendo le classiche operazioni</li>
                    </ul>
                </figcaption>
            </figure>
        </div>
    </div>
    <br><hr><br>
</div>


<div class="textContent" id="Bool" style="text-align: center;">
    <h2  >Porte Logiche</h2>
    <img src="../public/ARCH/portelogiche.png"> 
    <h2  >Proprietà Logiche</h2>
    <div style="font-size: 25px;">
        <b>Dualità</b>: si ottiene lo stesso risultato negando le costanti (0 o 1) e cambiando AND con OR
        <br>
    </div>
    <img src="../public/ARCH/propretalogiche.png" style="height: 350px;">
</div>

<div class="textContent" id="Codifica">
    <h2  >Codifica dei DATI</h2>
    <p style="text-align: center; font-size: 25px;">
        Un PC deve essere in grado di codificare opportunamente qualsiasi tipo di dato:
    </p>
    <div id="navCode">
        <ul style="font-size: 20px;">
            <li><b><a href="#CodificaNumeri">NUMERI</a></b></li>
            <li><b><a href="#CodificaChar">CARATTERI TESTUALI</a></b></li>
            <li><b><a href="#CodificaImg">IMMAGINI/VIDEO</a></b></li>
            <li><a href="#ADC"><b>SUONI</b></a></li>
        </ul>
    </div>
    <div id="CodificaNumeri" >
        <h2  >Codifica dei NUMERI</h2>
        
        
        <ul style="text-align: left;">
            <li>16-32-64bit FIXED POINT = virgola fissa posta dopo l'ultimo bit 2^0   <a target=”_blank” href="https://it.wikipedia.org/wiki/Rappresentazione_dei_numeri_relativi#Eccesso_N">???</a>
                <ul>
                    <li>
                        <b>NATUALI(N)</b>  = solo positivi -> <b>unisigned</b>
                    </li>
                    <li><b>INTERI(Z)</b>  = + o -  -> <b>signed</b></li>
                </ul>
                Tipi di codifica per numeri INTERI:
                <ul>
                    <li style="padding-bottom: 30px;"><b>Ultimo bit</b> assegnato al segno. 1="-"   0="+" <br> 8bit di codifica 9 = 0 0001001   ///  -9 = 1 0001001
                    </li>
                    <li style="padding-bottom: 30px;"><b>Complemento a 1 </b><br>
                        Si nega tutto il numero  ->     9 = 00001001   ///  -9 = 11110110 <br> Vi sono 2 rappresentazioni possibili del numero 0
                    </li>
                    <li style="padding-bottom: 30px;"><b>Complemento a 2 </b><br>
                        <ul>
                            <li>
                                Valori tra 0 e 2^(Nbit-1) = codificati normalmente = <b>POSITIVI</b>
                            </li>
                            <li>
                                Valori tra -1 e -2^(Nbit-1) = codificati con Complemento a 2   <b>NEGATIVI</b> <br>
                                <img src="../public/ARCH/Complementoa2.png" style="padding: 25px;"> <br>
                                <b>VANTAGGI</b>
                                <ul>
                                    <li>
                                        SEGNO Immediatamente riconoscibile dall'ultimo bit
                                    </li>
                                    <li><b>Sottrazione</b> si somma un termine NEGATIVO</li>
                                    <li><b>Prodotto</b> = Somma N volte quante il termine positivo</li>
                                    <li><b>Divisione</b> = Sottazione del Divisore fino ad annullare il dividendo <b>contando</b> le sottrazioni</li>
                                    <li>Vi è <b>una sola</b> rappresentazione dello 0</li>
                                </ul>
                            </li>
                        </ul>          
                    </li>
                    <li style="padding-bottom: 30px;"><b>Eccesso N=2^(nbit-1)</b><br>
                        <ul>
                            <li>Lo 0 viene codificato come 2(nbit-1)</li>
                            <li>-2^(nbit-1) - 2^(nbit-1)</li>
                            <li>Numeri <b>positivi</b> 0 - 2^(nbit-1) = 1000 - 1111</li>
                            <li>numeri <b>negativi</b> -1 - -2^(nbit-1) = 0111 - 0000</li>
                        </ul>
                    </li>
                </ul>
                <img src="../public/ARCH/codifica_numeri.png" style="padding-left: 100px;">
            </li>
            <li style="padding: 30px;">32-64-128bit FLOATING POINT
                <br><b>REALI(R)</b><br>
                Rappresentati in notazione normalizzata, con <b>mantissa</b> e <b>esponente</b><br>
                <img src="../public/ARCH/floatingpoint.png"><img src="../public/ARCH/floatingconv.png">
                
            </li>
        </ul>
    </div>
    <div id="CodificaChar">
        <h2  >Codifica dei CARATTERI</h2>
        Un carattere è un <b>elemento singolo</b> di una <b>stringa di testo</b><br>
        <div id="navCode">
            <ul>
                <li>Cifre, Lettere, Simboli di Puntaggiatura</li>
                <li>Simboli speciali #, %, @, ...</li>
                <li>Caratteri speciali che contengono informazioni di controllo <br> come tabulazione, ESC, spostamento del cursore</li>
            </ul>
        </div>
        <b>CODICE ARBITRARIO</b> <br>
        <ul>
            <li>Per le Cifre si usa la formula C('0') + Cifra</li>
            <li>Per i caratteri si usa la formula C('A') + posLettera-1</li>
        </ul>
        Esistono diversi codici per rappresentare i vari caratteri testuali, <br> ognuno di essi ha una tabella che converte ogni carattere in formato binario
        <br>
        <h3 style="color: blue; text-align: center;">CODICE ASCII</h3>
        <table>
            <tr>
                <td style="width: 50%;">
                    <figure>
                        <img src="../public/ARCH/ASCII7bit.jpg" >
                        <figcaption>ASCII standard 7 bit</figcaption>
                    </figure>
                </td>
                <td style="width: 50%;">
                    <figure>
                        <img src="../public/ARCH/ASCII8BIT.jpg">
                        
                        <figcaption>ASCII esteso 8 bit</figcaption>
                    </figure>
                </td>
            </tr>
        </table>
        <h3 style="color: blue; text-align: center;">CODICE UCS (UNICODE Character Set)</h3>
        <ul>
            <li>Codice a lunghezza variabile, 2 o più Byte per Carattere</li>
            <li>Il codice carattere non è univoco</li>
            <li>Alcuni codepoint vengono lasciati vuoti per future espansioni</li>
        </ul>
        
        <div style="text-align: center;">
            
            
            <h3 style="color: blue; text-align: center;">UTF (UCS Transformation Format)</h3>
            <img src="../public/ARCH/UTFCODE.png" style="padding: 30px;"> <br> 
            Alcuni Bit sono bloccati mentre quelli espressi con 'd' sono liberi di cambiare, codificando ogni tipo di carattere
        </div>
        <div>
            <h3 style="color: blue; text-align: center;">PROPRIET&Aacute; di un CODICE</h3>
            <ul>
                <li><b>compatto</b>: deve limitare il numero di bit necessari per la codifica</li>
                <li><b>pratico</b>: ottenere il codice semplicemente</li>
                <li><b>accuratezza</b>: deve minimizzare le perdite di informazione</li>
            </ul>
            &Eacute; possibile che si verifichino degli errori nella trasmissione o nella memorizzazione.
            <ul>
                <li><b>RUMORE</b> nel canale di trasferimento</li>
                <li><b>Imperfezione</b> nei supporti di memorizzazione</li>
                <li><b>Alterazioni</b> dei supporti di <b>memoria</b> (radioattività)</li>
            </ul> 
            
        </div>
        
        
    </div>
    <div id="CorrezioneErrori">
        <h2  >Codici Correzione Errori</h2>
        <ul>
            <li><b>Codice di Parità</b> (PARI o DISPARI) <br>
                <img src="../public/ARCH/codiceparità.jpg"> <br>
                <ul>
                    <li>Il <b>codice</b> viene <b>diviso in parole</b> di N bit</li>
                    <li>A <b>ogni parola</b> viene <b>aggiunto il parity flag</b></li>
                    <li>Il <b>numero di 1</b> nella parola + flag deve essere <b>PARI o DISPARI</b> a seconda del tipo di codice</li>
                    <li>Questo codice è in grado di <b> rilevare l'errore</b>, ma <b>non correggerlo</b></li>
                    <li><b>NON rileva </b> errori che <b>intaccano un numero pari</b> di bit</li>
                </ul>
            </li>
            <li style="padding: 30px;">Distanza di Hamming</li>
        </ul>
    </div>
    <div id="CodificaIMG">
        
    </div>
    <div id="CodificaSuoni">
        
    </div>
</div>

<script>
    let navButton = document.getElementsByTagName("button")[0];
    let hideNav = document.getElementById("hideNav");
    let indexNav = document.getElementById("index");
    hideNav.addEventListener("click", ()=> {
        indexNav.style.display = "none"
        navButton.style.display = "block"
    })
    navButton.addEventListener("click", () => {
        //toglie la visibilità del bottone
        navButton.style.display = "none"
        //visualizza l'indice
        indexNav.style.display = "flex"
    })
    
    let textContents = document.getElementsByClassName("textContent")
    function showContent(index){
        console.log(index)
        textContents[index].style.display = "inline-block"
    }
    let HideALL = document.getElementById("hideAll")
    HideALL.addEventListener("click", ()=> {
        //nasconde la NAVBAR
        indexNav.style.display = "none"
        //visualizza il navButton
        navButton.style.display = "block"
        //nasconde tutto il contenuto della pagina
        for (let index = 0; index < textContents.length; index++) {
            textContents[index].style.display = "none"
        }
        
    })
    
    let dropindexes = document.getElementsByClassName("indexdrop")
    let buttons = document.getElementsByClassName("fas fa-angle-down")
    
    function dropindex (index, flag) {
        if (flag) dropindexes[index].style.display = "flex"
        else dropindexes[index].style.display = "none"
        console.log(index)
    }
    
    
    //CONVERTITORE DI BASE
    let convert = document.getElementsByClassName("convert")[0]
    



    
    function checkBases() {
        if(startBase > 16 || startBase <2) {
            document.getElementById("startBase").value = ""
            document.getElementById("startBase").placeholder ="Base NON VALIDA"
            return false;
        } else if (toBase > 16 || toBase <2) {
            document.getElementById("toBase").value = ""
            document.getElementById("toBase").placeholder ="Base NON VALIDA"
            return false;
        }
        //se le basi sono corrette ritorna TRUE
        return true;

    }

    let invio = document.getElementById("convertButton")
    invio.addEventListener("click",()=> {
        //CONVERSIONE NUMERICA
        let number = Number(document.getElementById("number").value)
        let startBase = Number(document.getElementById("startBase").value)
        let toBase = Number(document.getElementById("toBase").value)
        //i dati inseriti vengono salvati in formato numero, invece che stringa
        if (checkBases()){
            //INIZIO CONVERSIONE
            if (startBase == 10){
                //conversione con divisione per la toBase
            }
            //controllare se la base è POTENZA DI 2
            if (toBase == 10) {
                //si usa il sistema di accumulo ricorsivo 
                // Risultato =  NuovaCifra + toBase*Risultato_PREC
            }
            //controllo se è POTENZA DI 2
            //ALTRIMENTI startBase -> 10 -> toBase
        }
        //CONVERSIONE NON EFFETTUATA
    })
    
    
    // <!--
    //     calc
    //     function doBaseCon() {
    //         form=document.forms[0];
    //         from=form.from.value;to=form.to.value;val=""+form.val.value;
            
    //         if(check(to,0)==1 || check(from,0)==1){form.res.value="Le basi devono essere numeri interi (escluso -1, 0, +1).";return;}
    //         if(to==0 || from==0){form.res.value="Nella base che hai scelto il valore numerico NON può essere convertito.";return;}
    //         if(to==-1 || to==1 || from==-1 || from==1){form.res.value="Non credo che la base scelta funzioni bene!!";return;}
            
    //         from=1*from;to=1*to;
            
    //         txt=baseCon(from,to,val);
            
    //         form.res.value=txt;
            
    //     }
    //     function check(n,dec) {
    //         np=0;e=0;l=n.length;
    //         for(r=0;r<l;r++) {
    //             c=n.substring(r,r+1);
    //             if(c<"0" || c>"9") {
    //                 e2=1;
    //                 if(c=="." && np==0 && dec==1){np++;e2=0;}
    //                 if((c=="+" || c=="-")&& r==0 && l>1){e2=0}
    //                 e=e | e2;
    //             }
    //         }if(n=="-." || n=="+.") return 1;
    //         return e;
    //     }
        
    //     function clr() {
    //         f=document.forms[0];
    //         f.res.value="";
    //     }
        
    //     function format(num) {
    //         if(""+num=="NaN"){return "Controlla bene il valore inserito."}
            
    //         txt="";
    //         if(num<0){txt+="-"; num*=-1}
    //         for(n=0; n<11; n++) {
    //             dig=Math.floor(num);
    //             num=(num-dig)*10;
    //             txt+=dig;
    //             if(n==0)txt+=".";
    //         }
    //         return txt;
    //     }
        
    //     function baseCon(from,to,val) {
    //         val2=baseXCon10(from,val);
    //         if(""+val2=="nh")sum="No alpha-numerics in base "+from+" numbers."; else sum=base10ConX(to,val2);
    //         return sum;
            
    //     }
    //     function baseXCon10(from,val){
    //         val=""+val;sum=0;sgn=1;pl=0;div=1;
    //         for(a=0;a<val.length;a++) {
    //             ch=val.substring(a,a+1);
    //             if(ch=="+" && a==0)sgn=1;
    //             else {
    //                 if(ch=="-" && a==0)sgn=-1;
    //                 else {
    //                     if(ch==".")div=pl;
    //                     else {
    //                         if(ch>='0' && ch<='9')dg=1*ch;
    //                         ch=ch.toUpperCase();
    //                         if(ch=='A')dg=10;if(ch=='B')dg=11;if(ch=='C')dg=12;if(ch=='D')dg=13;if(ch=='E')dg=14;if(ch=='F')dg=15;
    //                         if(ch>='A' && ch<='Z' && from<=10 && from>0) {nh="nh"; return nh;}
    //                         sum+=Math.pow(from,pl)*dg;
    //                         pl--;
    //                     }
    //                 }
    //             }
                
    //         }
    //         if(div==1)div=pl;
    //         sum/=Math.pow(from,div+1);
    //         if(sum>1000000 && sum-Math.floor(sum)<.000001) sum=Math.floor(sum);
    //         if(sum>1000000 && Math.ceil(sum)-sum<.000001) sum=Math.ceil(sum);
    //         sum*=sgn; round=1000000000000
    //         sum=Math.floor(sum*round+.5)/round;
    //         return sum;
    //     }
    //     function base10ConX(to,val) {
    //         //to new
    //         if(val<0){sgn="-";val=-val;}else{sgn="";}
    //         sum="";
            
    //         c=Math.floor(val);
            
    //         start=0;rem=0;digits=0;
    //         if(c==0)sum="0";
    //         while(Math.abs(c)>=1) {
    //             d=c-Math.floor(c/to)*to;
    //             dfl=Math.floor(d);
    //             if(dfl!=d){rem=d-dfl;d=dfl;}
    //             if(Math.abs(d)>Math.abs(to)) d=0;
    //             c=Math.floor(c/to);
    //             if((start==0 && d!=0) || c<val*to)start=1;start=1;
    //             sum=""+alp(d,to)+sum;
    //             digits++;
                
    //         }
    //         c=val-Math.floor(val)+rem;
    //         if(c!=0) {//decimals
    //             sum+=".";
    //             for(a=0;a<32/Math.log(to)-digits;a++) {
    //                 if(c==0)break;
    //                 d=Math.floor(c*to);
    //                 if(to<0 && d==to) break;
    //                 c=c*to-d;
    //                 sum+=alp(d,to);
    //             }
    //         }
    //         sum=sgn+sum;
            
    //         return sum;
    //     }
    //     function alp(d,to) {
    //         if(d>=0 && d<=9)w=""+d;
    //         if(to>=10 && to<=36) { 
    //             if(d==10)w="A";if(d==11)w="B";if(d==12)w="C";if(d==13)w="D";if(d==14)w="E";if(d==15)w="F";if(d==16)w="G";if(d==17)w="H";if(d==18)w="I";if(d==19)w="J";if(d==20)w="K";if(d==21)w="L";if(d==22)w="M";if(d==23)w="N";if(d==24)w="o";if(d==25)w="P";if(d==26)w="Q";if(d==27)w="R";if(d==28)w="S";if(d==29)w="T";if(d==20)w="U";if(d==31)w="V";if(d==32)w="W";if(d==33)w="X";if(d==34)w="Y";if(d==35)w="Z";
    //         }
    //         if(d<0 || d>35 || (d>9 && to>36))
    //             w="["+d+"]";
    //             return w;
    //         }
            
    //         //-->
            
        </script>
        
        <script src="https://kit.fontawesome.com/93e39226bb.js" crossorigin="anonymous"></script>
    </body>
    </html>