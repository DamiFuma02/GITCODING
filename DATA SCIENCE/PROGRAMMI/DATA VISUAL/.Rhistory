library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
View(mpg)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
best_in_class = mpg %>%
group_by(class) %>%
filter(row_number(desc(hwy)) == 1)
best_in_class
presidential
View(presidential)
a = presidential %>% mutate(id = 33+ (1:nrow(presidential)))
a
View(presidential)
presidential %>%
# AGGIUNGE UN ID a OGNI RIGA
mutate(id = 33+ (1:nrow(presidential))) %>%
# START = x, ID = y, PARTY = COLOUR
ggplot(aes(x=start, y=id, colour = party))
#View(presidential)
presidential %>%
# AGGIUNGE UN ID a OGNI RIGA
mutate(id = 33+ (1:nrow(presidential))) %>%
# START = x, ID = y, PARTY = COLOUR
ggplot(aes(x=start, y=id, colour = party)) +
# AGGIUNGERE UN PUNTO CHE IDENTIFICHI L'INIZIO DELLA CANDIDATURA
geom_point()
View(presidential)
presidential[[1]]
presidential[1,]
eis = presidential[1,]
eis$start - eis$end
#View(presidential)
presidential %>%
# AGGIUNGE UN ID a OGNI RIGA
mutate(id = 33+ (1:nrow(presidential))) %>%
# START = x, ID = y, PARTY = COLOUR
ggplot(aes(x=start, y=id, colour = party)) +
# AGGIUNGERE UN PUNTO CHE IDENTIFICHI L'INIZIO DELLA CANDIDATURA
geom_point() +
# AGGIUNGE UN SEGMENTO CON LUNGHEZZA PROPORZIONALE ALLA DURATA DEL MANDATO
geom_segment(aes(xend = end, yend = id))
#View(presidential)
presidential %>%
# AGGIUNGE UN ID a OGNI RIGA
mutate(id = 33+ (1:nrow(presidential))) %>%
# START = x, ID = y, PARTY = COLOUR
ggplot(aes(x=start, y=id, colour = party)) +
# AGGIUNGERE UN PUNTO CHE IDENTIFICHI L'INIZIO DELLA CANDIDATURA
geom_point() +
# AGGIUNGE UN SEGMENTO CON LUNGHEZZA PROPORZIONALE ALLA DURATA DEL MANDATO
geom_segment(aes(xend = end, yend = id)) +
# SETTING MANUALE DEI COLORI
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
theme_bw()
#View(presidential)
presidential %>%
# AGGIUNGE UN ID a OGNI RIGA
mutate(id = 33+ (1:nrow(presidential))) %>%
# START = x, ID = y, PARTY = COLOUR
ggplot(aes(x=start, y=id, colour = party)) +
# AGGIUNGERE UN PUNTO CHE IDENTIFICHI L'INIZIO DELLA CANDIDATURA
geom_point() +
# AGGIUNGE UN SEGMENTO CON LUNGHEZZA PROPORZIONALE ALLA DURATA DEL MANDATO
geom_segment(aes(xend = end, yend = id+1)) +
# SETTING MANUALE DEI COLORI
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
# PER MODIFICARE IL TEMA DI BACKGROUND
theme_bw()
install.packages("gapminder")
library(gapminder)
gapminder
View(gapminder)
country_colors
(angoli = seq(0,2*pi,length.out = 17))
# RAGGIO CIRCONFERENZA GONIOMETRICA
R = 1
# LISTA DI ANGOLI ESPRESSI IN RADIANTI
(angoli = seq(0,2*pi,length.out = 17))
# A = {a1,a2,...,a17}: ai= R * cos(angoli[i])
(A = R*cos(angoli))
library(dplyr)
library(tidyr)
library(gapminder)
library(ggplot2)
library(stringr)
(DF = data.frame(angoli,A,B))
# RAGGIO CIRCONFERENZA GONIOMETRICA
R = 1
# LISTA DI ANGOLI ESPRESSI IN RADIANTI
(angoli = seq(0,2*pi,length.out = 17))
# A = {a1,a2,...,a17}: ai= R * cos(angoli[i])
(A = R*cos(angoli))
# B = {b1,b2,...,b17}: bi = R*sin(angoli[i])
(B = R*sin(angoli))
(DF = data.frame(angoli,A,B))
ggplot(df,aes(A,B))
ggplot(data = DF, aes(A,B))
a = ggplot(data = DF, aes(A,B))
(base = ggplot(data = DF, aes(A,B)))
base + geom_point()
geom_point(x=A,y=B)
geom_point(aes(x=A,y=B))
View(geom_point(aes(x=A,y=B)))
mpg
View(mpg)
GoldRatio = pi*(3-sqrt(5))
(GoldRatio = pi*(3-sqrt(5)))
sqrt(5)
pi
(3-sqrt(5))
pi*(3-sqrt(5))
# ESPRESSO IN RADIANTI
(GoldRatioRads = pi*(3-sqrt(5)))
(GoldRatioDegs = 180*(3-sqrt(5)))
GoldRatioRads == GoldRatioDegs*2*pi/360
# ESPRESSO IN RADIANTI
(GoldRatioRads = pi*(3-sqrt(5)))
(GoldRatioDegs = 180*(3-sqrt(5)))
# fattore conversione GRADI --> RADIANTI
DegsToRads = 2*pi/360
GoldRatioRads == GoldRatioDegs*DegsToRads
# fattore conversione RADIANTI --> GRADI
RadsToDegs = 360/(2*pi)
GoldRatioDegs == GoldRatioRads*RadsToDegs
library(dplyr)
library(tidyr)
library(gapminder)
library(ggplot2)
library(stringr)
df
df = data.frame(T,A,B)
df
# numero di puntini da disegnare
points = 500
T = (1:points)*GoldRatioRads
A = cos(T)
B = sin(T)
df = data.frame(T,A,B)
ggplot(df, aes(A*T,B*T)) +
geom_point() +
coord_fixed() +
theme_void()
df
library(dplyr)
library(tidyr)
library(gapminder)
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
library(gapminder)
library(ggplot2)
library(stringr)
library(gapminder)
library(dplyr)
library(tidyr)
library(gapminder)
library(ggplot2)
library(stringr)
library(gganimate)
install.packages("gganimate")
library(dplyr)
library(tidyr)
library(gapminder)
library(ggplot2)
library(stringr)
library(gganimate)
mtcars
install.packages("gifski")
library(gifski)
install.packages(gifski)
install.packages("gifski")
library(gifski)
