install.packages("leaflet")
library(leaflet)
library(leaflet)
library(dplyr)
library(tidyr)
leaflet() %>% setView(174.764, -36.877, zoom = 16) %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% setView(174.764, -36.877, zoom = 1) %>% addTiles()
%>%   # AGGINGE IL MARKER ALLE COORDINATE STABILITE
leaflet() %>% setView(174.764, -36.877, zoom = 1) %>% addTiles()   # AGGINGE IL MARKER ALLE COORDINATE STABILITE
%>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% setView(174.764, -36.877, zoom = 1) %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% setView(174.764, -36.877, zoom = 1) %>% addTiles()
leaflet() %>% setView(174.764, -36.877, zoom = 16)
leaflet() %>% setView(174.764, -36.877, zoom = 16) %>% addTiles()
leaflet() %>% setView(174.764, -36.877, zoom = 16)
leaflet() %>% setView(174.764, -36.877, zoom = 16) %>% leafletOptions(maxZoom = 20) %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% setView(174.764, -36.877, zoom = 16) %>% leafletOptions(maxZoom = 16) %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% leafletOptions(maxZoom = 16) %>% setView(174.764, -36.877, zoom = 16)  %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leafletOptions(maxZoom = 16) %>% setView(174.764, -36.877, zoom = 16)  %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% addTiles() %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
leaflet() %>% addTiles() %>% setView(174.764, -36.877, zoom = 10) %>% addMarkers(174.764, -36.877, popup = "Maungawhau") %>% leafletOptions(maxZoom = 16)
leaflet() %>% addTiles() %>% setView(174.764, -36.877, zoom = 10) %>% addMarkers(174.764, -36.877, popup = "Maungawhau") %>% leafletOptions(maxZoom = 16)
leaflet() %>% addTiles() %>% leafletOptions(maxZoom = 16) %>% setView(174.764, -36.877, zoom = 10) %>% addMarkers(174.764, -36.877, popup = "Maungawhau")
library(shiny)
install.packages("shiny")
library(shiny)
server = function(input, output) {}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny)
# Define UI with a basic widgets
ui = fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
# Define server logic
server = function(input, output) {}
# Run the app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(cache = TRUE)
library(gapminder)
library(ggplot2)
library(gganimate)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot()
p +
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out') +
labs(title = 'Fuel consumption for {closest_state} gears', x = 'cyl')
# ggplot code
p = ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot()
p +
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out') +
labs(title = 'Fuel consumption for {closest_state} gears', x = 'cyl')
