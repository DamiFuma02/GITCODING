library(tidyr)
library(dplyr)
update.packages("dplyr")
library(dplyr)
update.packages("dplyr")
library(tidyr)
# PER DATABASE VOLI NYC 2013
library("nycflights13")
update.packages("nycflights13")
flights
starwars
starwars %>% filter(name == "Luke Skywalker") %>% pull(films)
lista = starwars %>% filter(name == "Luke Skywalker")
lista
starwars %>% filter(name == "Luke Skywalker") %>% pull(films)
starwars %>% filter(name == "Luke Skywalker") %>% pull(films) %>% unlist()
lista = starwars %>% filter(name == "Luke Skywalker") %>% pull(films)
lista
lista = starwars %>% filter(name == "Luke Skywalker")
lista
lista$films
lista$hair_color
lista$films
flights
flights %>% filter(flights$month == 12, flights$day == 25)
filter(flights, month == 12)
filter(flights, month == 12 & day == 25)
spec(starwars)
str(starwars)
library(tibble)
library(dplyr)
update.packages("dplyr")
library(dplyr)
library(tibble)
select(starwars, species)
factor(select(starwars, species))
list(select(starwars, species))
factor(list(select(starwars, species)))
select(starwars, name, gender, birth_year)
select(starwars, ends_with("color"))
select(starwars, contains("color"))
select(starwars, -contains("color"))
dim(starwars)
# SELEZIONA TUTTI GLI ELEMETNI SENZA IL PARAMETRO COLOR
select(starwars, -contains("color"))
starwars %>% filter(species == "Human")
starwars %>%
filter(species == "Droid", !is.na(birth_year))
starwars
starwars
starwars %>% filter(species == "Human", hair_color == "brown")
starwars %>% filter(name == ends_with("walker")) %>% select(films)
starwars %>% filter(ends_with("walker")) %>% select(films)
starwars %>% filter(name == "Luke") %>% select(films)
starwars %>% filter(name == "Luke Skywalker") %>% select(films)
# RESTITUISCE UN TIBBLE 1x1 com VALORE LISTA DI FILMS
(listaFilm = starwars %>% filter(name == "Luke Skywalker") %>% select(films))
listaFIlm[[1]]
listaFilm[[1]]
# SOLUZIONE ALTERNATIVA IN PIPELINE
starwars %>% filter(name == "Luke Skywalker") %>% pull(films)
nomiPull.unlist()
unlist(nomiPull)
# SOLUZIONE ALTERNATIVA IN PIPELINE
(nomiPull = starwars %>% filter(name == "Luke Skywalker") %>% pull(films))
unlist(nomiPull)
## ESTRAE I VALORI DALLE COPPIE ($chiave:valore) --> STRINGHE
nomiPull[1]
## ESTRAE I VALORI DALLE COPPIE ($chiave:valore) --> STRINGHE
length(nomiPull[1])
## ESTRAE I VALORI DALLE COPPIE ($chiave:valore) --> STRINGHE
length(nomiPull)
## ESTRAE I VALORI DALLE COPPIE ($chiave:valore) --> STRINGHE
nomiPull
## ESTRAE I VALORI DALLE COPPIE ($chiave:valore) --> STRINGHE
nomiPull$[[1]]
## ESTRAE I VALORI DALLE COPPIE ($chiave:valore) --> STRINGHE
nomiPull$[1]
flights
library(dplyr)
library("nycflights13")
flights
starwars
View(starwars)
```{r}
library(dplyr)
library("nycflights13")
library(tibble)
update.packages("dplyr")
update.packages("nycflights13")
library("nycflights13")
library(tibble)
library(dplyr)
library(dplyr)
library("nycflights13")
library(tibble)
flights
View(flights)
dir
dir()
dir()
View(flights)
library(dplyr)
library("nycflights13")
library(tibble)
View(flights)
View(flights)
View(planes)
inner_join(flights, plane, by = c("tailnum" = "tailnum"))
inner_join(flights, planes, by = c("tailnum" = "tailnum"))
str(inner_join(flights, planes, by = c("tailnum" = "tailnum")))
View(flights)
View(planes)
inner_join(flights, planes, by = c("tailnum" = "tailnum")) %>% filter(manufacturer == "BOEING")
flights %>% mutate(id = 1:nrow(flights))
library(dplyr)
library("nycflights13")
library(tibble)
update.packages("nycflights13")
update.packages(dplyr)
update.packages("dplyr")
library(dplyr)
library("nycflights13")
library(tibble)
library(tidyr)
library(readr)
library(stringr)
library(lubridate)
update.packages("lubridate")
## PARTE VARIABILE  = DECENNIOINIZIO;DECENNIOFINE = (1920) = 2019-2020
## DAL 93 al  99 e dal 2000 al 2021
years = sprintf("%02d", c(seq(93,99), seq(0,21)))
years
link = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
## PARTE VARIABILE  = DECENNIOINIZIO;DECENNIOFINE = (1920) = 2019-2020
## DAL 93 al  99 e dal 2000 al 2021
years = sprintf("%02d", c(seq(93,99), seq(0,21)))
# GENERAZIONE VETTORE LINK
nseasons = length(years)-1
links = str_c(link, str_c(years[1:nseasons], years[2:nseasons-1]), tail)
# CICLO FOR FINO ALL'ESAURIMENTO DEI LINKS
L = vector("list",nseasons)  # LISTA VUOTA
for (i in 1:nseasons) {
# LEGGE OGNI FILE E LO INSERISCE IN UNA LISTA
L[[i]] = read_csv(links[i])
}
View(L)
link = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
## PARTE VARIABILE  = DECENNIOINIZIO;DECENNIOFINE = (1920) = 2019-2020
## DAL 93 al  99 e dal 2000 al 2021
years = sprintf("%02d", c(seq(93,99), seq(0,21)))
# GENERAZIONE VETTORE LINK
nseasons = length(years)-1
links = str_c(link, str_c(years[1:nseasons], years[2:nseasons-1]), tail)
# CICLO FOR FINO ALL'ESAURIMENTO DEI LINKS
L = vector("list",nseasons)  # LISTA VUOTA
for (i in 1:nseasons) {
# LEGGE OGNI FILE E LO INSERISCE IN UNA LISTA
L[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# CICLO FOR FINO ALL'ESAURIMENTO DEI LINKS
L = vector("list",nseasons)  # LISTA VUOTA
L
for (i in 1:nseasons) {
# LEGGE OGNI FILE E LO INSERISCE IN UNA LISTA
L[[i]] = read_csv(links[i], show_col_types = FALSE)
}
problems()
View(L)
# prepare link structure
link1 = "http://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i])
}
# name the seasons with years
names(l) = years[1:nseasons]
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
# prepare link structure
link1 = "http://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# name the seasons with years
names(l) = years[1:nseasons]
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
View(history)
history
# prepare link structure
link1 = "http://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# name the seasons with years
names(l) = years[1:nseasons]
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
View(arr)
arr = list()
for (i in 1:nseasons) {
arr = rbind(arr, l[[i]])
}
View(arr)
# prepare link structure
link1 = "http://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# name the seasons with years
names(l) = years[1:nseasons]
View(l)
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
# prepare link structure
link1 = "https://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# name the seasons with years
names(l) = years[1:nseasons]
View(l)
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
# combine seasons in a unique data frame
arr = list()
for (i in 1:nseasons) {
arr = rbind(arr, l[[i]])
}
View(arr)
# save data on disk
#write_csv(history, "history.csv")
dfH = history %>%
mutate(outcome = ifelse(FTHG > FTAG, "H", ifelse(FTHG < FTAG, "A", "D"))) %>%
count(HomeTeam, outcome)
history %>%
mutate(outcome = ifelse(FTHG > FTAG, "H", ifelse(FTHG < FTAG, "A", "D"))) %>%
count(HomeTeam, outcome)
# prepare link structure
link1 = "https://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# name the seasons with years
names(l) = years[1:nseasons]
View(l)
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
# combine seasons in a unique data frame
arr = list()
for (i in 1:nseasons) {
arr = rbind(arr, l[[i]])
}
View(arr)
# save data on disk
write_csv(history, "history.csv")
history %>%
mutate(outcome = ifelse(FTHG > FTAG, "H", ifelse(FTHG < FTAG, "A", "D"))) %>%
count(HomeTeam, outcome)
# prepare link structure
link1 = "https://www.football-data.co.uk/mmz4281/"
link2 = "/I1.csv"
# first solution
years = sprintf("%02d", c(seq(93, 99), seq(0, 21)))
# second solution
years = c(as.character(seq(93, 99)), str_c("0", as.character(seq(0, 9))), as.character(seq(10, 21)))
# link vector
nseasons = length(years)-1
links = str_c(link1, str_c(years[1:nseasons], years[2:(nseasons+1)]), link2)
# scrape data
# make a list of lists (each list element is a season)
l = vector("list", nseasons)
for (i in 1:nseasons) {
# read the season dataset
l[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# name the seasons with years
names(l) = years[1:nseasons]
View(l)
# clean data (filter columns and rows)
for (i in 1:nseasons) {
l[[i]] = l[[i]] %>%
select(Date, HomeTeam, AwayTeam, FTHG, FTAG) %>%
filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>%
mutate(Date = dmy(Date))
}
# combine seasons in a unique data frame
DF = list()
for (i in 1:nseasons) {
DF = rbind(DF, l[[i]])
}
View(DF)
# save data on disk
write_csv(DF, "history.csv")
DF %>%
mutate(outcome = ifelse(FTHG > FTAG, "H", ifelse(FTHG < FTAG, "A", "D"))) %>%
count(HomeTeam, outcome)
dfH = DF %>%
mutate(outcome = ifelse(FTHG > FTAG, "H", ifelse(FTHG < FTAG, "A", "D"))) %>%
count(HomeTeam, outcome)
dfH
