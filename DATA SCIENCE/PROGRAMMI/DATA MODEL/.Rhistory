install.packages("modelr")
library(dplyr)
library(ggplot2)
library(modelr)
sim1
ggplot(sim1,aes(x,y)) + geom_point()
mod1 = lm(y ~ x,data= sim1)
mod1
mod1 = lm(formula = y ~ x,data= sim1)
mod1
library(dplyr)
library(ggplot2)
library(modelr)
# scatterplot
ggplot(sim1,aes(x,y)) + geom_point()
# regressione
mod1 = lm(formula = y ~ x,data= sim1)
summary(mod1)
mod1$coefficients
ggplot(sim1,aes(x,y)) + geom_point() + geom_abline(intercept = mod1$coefficients[1], slope = mod1$coefficients[2], color = "red")
( r = cor(sim1$x, sim1$y))
summary(mod1)$r.squared
# or
r^2
(grid = data_grid(sim1,x))
(grid = add_predictions(grid,mod1))
ggplot(sim1, aes(x=x)) + geom_point(aes(y=y)) + geom_line(data = grid, mapping = aes(y=pred), colour = "red")
sim1 = add_predictions(sim1, mod1)
(sim1 = add_predictions(sim1, mod1))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(modelr)
dim(diamonds)
spec(diamonds)
dim(diamonds)
colnames(diamonds)
select(diamonds, price, carat:clarity)
df = select(diamonds, price, carat:clarity)
ggplot(df,aes(x=cut,y=price)) + geom_point()
group_by(diamonds, color) %>%
summarise(median_price = median(price))
ggplot(diamonds, aes(x = color, y = price)) +
geom_boxplot()
group_by(diamonds, clarity) %>%
summarise(median_price = median(price))
ggplot(diamonds, aes(x = clarity, y = price)) +
geom_boxplot()
ggplot(diamonds, aes(x = cut, y = carat)) +
geom_boxplot()
ggplot(diamonds, aes(x = color, y = carat)) +
geom_boxplot()
diamonds %>% filter(carat <= 2.5) %>% mutate(lprice = log2(price), lcarat = log2(carat))
```{r}
library(dplyr)
library(ggplot2)
library(modelr)
dim(diamonds)
colnames(diamonds)
select(diamonds, price, carat:clarity)
diamonds = diamonds %>% filter(carat <= 2.5) %>% mutate(lprice = log2(price), lcarat = log2(carat))
mod = lm(lprice ~ lcarat, data = diamonds)
mod = lm(lprice ~ lcarat, data = diamonds)
cor(diamonds$resid, diamonds$lcarat)
diamonds = diamonds %>% filter(carat <= 2.5) %>% mutate(lprice = log2(price), lcarat = log2(carat))
mod = lm(lprice ~ lcarat, data = diamonds)
cor(diamonds$resid, diamonds$lcarat)
library(dplyr)
library(ggplot2)
library(modelr)
dim(diamonds)
colnames(diamonds)
select(diamonds, price, carat:clarity)
diamonds = diamonds %>% filter(carat <= 2.5) %>% mutate(lprice = log2(price), lcarat = log2(carat))
mod = lm(lprice ~ lcarat, data = diamonds)
cor(diamonds$resid, diamonds$lcarat)
diamonds = diamonds %>% filter(carat <= 2.5) %>% mutate(lprice = log2(price), lcarat = log2(carat))
# model prince in terms of carat
mod = lm(lprice ~ lcarat, data = diamonds)
cor(diamonds$lprice, diamonds$lcarat)
ggplot(diamonds, aes(x = lcarat, y = lprice)) +
geom_hex()
# cache results
knitr::opts_chunk$set(cache=TRUE, echo = TRUE, eval = TRUE, message=FALSE, warning = FALSE, fig.align='center')
## Analysis
library(dplyr)
library(ggplot2)
library(modelr)
select(diamonds, price, carat:clarity)
# Log-transform price and carat. The log-transformation is particularly useful here because it makes the pattern linear, and linear patterns are the easiest to work with.
diamonds = diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
# model prince in terms of carat
mod = lm(lprice ~ lcarat, data = diamonds)
cor(diamonds$lprice, diamonds$lcarat)
ggplot(diamonds, aes(x = lcarat, y = lprice)) +
geom_hex()
# add residuals
diamonds = diamonds %>% add_residuals(mod)
cor(diamonds$resid, diamonds$lcarat)
ggplot(diamonds, aes(x = lcarat, y = resid)) +
geom_hex()
# best cut is Ideal, worst is Foor
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot()
ggplot(diamonds, aes(x = cut, y = resid)) +
geom_boxplot()
# best color is D, worst is J
ggplot(diamonds, aes(x = color, y = price)) +
geom_boxplot()
ggplot(diamonds, aes(x = color, y = resid)) +
geom_boxplot()
# best clarity is IF, worst is I1
ggplot(diamonds, aes(x = clarity, y = price)) +
geom_boxplot()
ggplot(diamonds, aes(x = clarity, y = resid)) +
geom_boxplot()
diamonds = diamonds %>% add_residuals(mod)
cor(diamonds$resid, diamonds$lcarat)
ggplot(diamonds, aes(x = lcarat, y = resid)) +
geom_hex()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(modelr)
library(nycflights13)
daily <- flights %>%  mutate(date = make_date(year, month, day)) %>%   group_by(date) %>%   summarise(n = n())
ggplot(daily, aes(date,n)) + geom_line()
daily = daily %>% mutate(weekDay = wday(date,label = TRUE))
daily
daily = daily %>% mutate(weekDay = wday(date,label = TRUE))
daily
ggplot(daily,aes(weekDay,n)) + geom_boxplot()
ggplot(filter(daily, ! (wday %in% c("Sab", "Dom"))), aes(date,n)) +  geom_line() +  geom_smooth(se = FALSE, span = 0.20)
daily = daily %>% mutate(weekDay = wday(date,label = TRUE))
daily
ggplot(daily,aes(weekDay,n)) + geom_boxplot()
ggplot(filter(daily, ! (wday %in% c("Sab", "Dom"))), aes(date,n)) +  geom_line() +  geom_smooth(se = FALSE, span = 0.20)
ggplot(filter(daily, ! (weekDay %in% c("sab", "dom"))), aes(date,n)) +  geom_line() +  geom_smooth(se = FALSE, span = 0.20)
