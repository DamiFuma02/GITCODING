(prova = I(list(Venus, Giove)))
a = list(1,2)
b = list(1,2)
a == b
diag(3)
A = matrix(data = 1:4, nrow = 2)
A
A ^ 0
diag(2)
A ^ 2
A ^ 3
A ^ 2
A %*% A
A * A
A = matrix(data = c(1,2,0,0,3,0,0,5,1), nrow = 3)
A
A = matrix(data = c(1,2,0,0,3,0,0,5,1), nrow = 3, byrow = TRUE)
A
A ^ 5
M = matrix(c(
c(1200, 1190, 1100, 1120, 890),
c(6200, 6690, 6700, 7120, 7150),
c(8900, 8790, 8760, 8800, 9010),
c(3300, 3490, 3660, 4300, 4510),
c(2190, 2000, 1890, 1740, 1500)), ncol = 5
)
row.names(M) = c("riga1", "riga2", "riga3", "riga4", "riga5")
colnames(M) = LETTERS[1:5]
barplot(M[1,])
barplot(M[1,])
# genera 1000 numeri casuali la cui media = m (0 di DEFAULT)
X = rnorm(1000, mean = 10, sd = 10)
X
barplot(X)
# genera 1000 numeri casuali la cui media = m (0 di DEFAULT)
X = rnorm(1000, mean = 10, sd = 10)
#hist(X, probability = TRUE, main = "Istogramma per X randomici")
# mostra la distribuzione dei numeri generati
rug(X)
density(X)
boxplot(X)
boxplot(X)
boxplot(X, range = 1.5)
boxplot(X, range = 2)
boxplot(X, range = 0)
Y = rnorm(1000)
plot(X, Y)
c(1L, "")
URL = "http://lib.stat.cmu.edu/datasets/wseries"
(world_series = scan(URL, skip = 35, nlines = 23, what = (1L, "")))
URL = "http://lib.stat.cmu.edu/datasets/wseries"
(world_series = scan(URL, skip = 35, nlines = 23, what = list(1L, "")))
typeof(world_series)
world_series$year
names(world_series) = c("year", "results")
world_series$year
typeof(world_series$year)
(DF = data.frame(world_series$year, world_series$results))
DF
(DF = data.frame("year" = world_series$year, "results" world_series$results))
(DF = data.frame( world_series$year,  world_series$results), colnames("year", "results"))
(DF = data.frame( world_series$year,  world_series$results, col colnames("year", "results")))
(DF = data.frame( world_series$year,  world_series$results, colnames("year", "results")))
(DF = data.frame( world_series$year,  world_series$results))
names(DF) = c("year", "results")
DF
dim(DF)
DF[1]
DF[,1]
DF[[1]]
DF[1]
# order(vettoreAnni)
(perm = sort(vettoreAnni))
(vettoreAnni = DF[1])
# order(vettoreAnni)
(perm = sort(vettoreAnni))
# order(vettoreAnni)
(perm = order(vettoreAnni))
# sort(vettoreAnni)
(perm = sort(vettoreAnni))
world_series[[1]]
matriceAnni = world_series[[1]]
sort(matriceAnni)
perm = sort(matriceAnni)
DF
DF[perm]
DF[perm,]
DF[DF$year == perm,]
order(vettoreAnni)
order(world_series[[1]])
order(world_series[[1]])
world_series[[1]]
(vettoreAnni = world_series[[1]])
typeof(vettoreAnni)
DF
DF[1]
typeof(DF[1])
typeof(DF[[1]])
# sort(vettoreAnni)
# restituisce gli indici degli elementi in ordine crescente
(perm = order(vettoreAnni))
Df
DF
DF[perm,]
library(readr)
update.packages("readr")
library(readr)
library(readr)
(file = read_csv("Rice_Cammeo_Osmancik"))
