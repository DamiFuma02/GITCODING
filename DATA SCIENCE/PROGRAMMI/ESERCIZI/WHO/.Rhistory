library(dplyr)
library(dplyr)
library(tidyr)
library(tidyverse)
who
who1 = who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE )
who1
who1$key
who1$key[starts_with("new_rel")]
who1$key %>% select(starts_with("new_rel"))
who1 %>% select(starts_with("new_rel"))
who1 %>% select(starts_with("newrel"))
who1 %>% select(key, starts_with("newrel"))
who1 %>% filter(key = starts_with("newrel"))
who1 %>% filter(key %>% starts_with("newrel"))
who1 %>% filter(key == "newrel")
who1 %>% mutate(key = str_replace(key, "newrel","new_rel"))
who1 %>% mutate(key = str_replace(key, "newrel","new_rel")) %>% select(key)
who1 %>% mutate(key = str_replace(key, "newrel","new_rel")) %>% select(key)[1]
who1 %>% mutate(key = str_replace(key, "newrel","new_rel")) %>% select(key)
who2 = who1 %>% mutate(key = str_replace(key, "newrel","new_rel"))
who2 = who1 %>% mutate(key = str_replace(key,"newrel","neww_rel"))
who2
who2$key
who2 = who1 %>% mutate(key = str_replace(key,"newrel","new_rel"))
who2$key
who1$key  #PRIMA DEL CAMBIAMENTO
who2 = who1 %>% mutate(key = str_replace(key,"newrel","new_rel"))
who2$key
who1[key == "newrel"]
who3 = who2 %>% separate(key, into = c("new","type", "sexage"), sep = "_")
who3
who3 %>% separate(sexage, into = c("sex","age"), sep = 1)
who3 %>% separate(sexage, into = c("sex","age"), sep = 0) # 1 = indice a cui separare
who3 %>% separate(sexage, into = c("sex","age"), sep = 1) # 1 = indice a cui separare
who4 = who3 %>% separate(sexage, into = c("sex","age"), sep = 1) # 1 = indice a cui separare
who4 %>% select(sex,age)
who4 %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age,"65","6565") %>% separate(age,into = c("age_high", "age_low"),sep = 2)
who5 = who4 %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age,"65","6565") %>% separate(age,into = c("age_high", "age_low"),sep = 2)
who5
who5 %>% count(new)
conta = who5 %>% count(new)
if (conta == nrow(who5)) print("NEW RIDONDANTE")
conta = who5 %>% count(new)[[1]]
conta = who5 %>% count(new)
conta
conta$n
conta = who5 %>% count(new)
if (conta$n == nrow(who5)) print("NEW RIDONDANTE")
conta = who5 %>% count(new,name="numeroDiNew")
if (conta$n == nrow(who5)) print("NEW RIDONDANTE")
conta = who5 %>% count(new,name="numeroDiNew")
if (conta$numeroDiNew == nrow(who5)) print("NEW RIDONDANTE")
who6 = who5 %>% drop(new,iso2,iso3)
who6 = who5 %>% drop(c("new","iso2","iso3"))
who6 = who5 %>% remove(c("new","iso2","iso3"))
who6 = who5 %>% remove("new","iso2","iso3")
who6
drop(array(1:12, dim = c(1,3,1,1,2,1,2)))
who6 = who5 %>% drop()
array(1:12, dim = c(1,3,1,1,2,1,2))
drop(1:3 %*% 2:4)
1:3 %*% 2:4
conta = who5 %>% count(new,name="numeroDiNew")
if (drop(conta) == nrow(who5)) print("NEW RIDONDANTE")
conta = who5 %>% count(new,name="numeroDiNew")
conta
drop(conta)
who6 = who5 %>% drop(new,iso2,iso3)
who6 = who5 %>% drop(who5,new,iso2,iso3)
who6 = who5 %>% remove(new,iso2,iso3)
who6
who6 = who5 %>% remove(c("new"))
who6 = who5 %>% remove("new")
who6 = who5 %>% remove(who5,"new")
who6 = who5 %>% select(-new,-iso2,-iso3)
who6
who5 = who4 %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2)
who5
who6 = who5 %>% select(-new,-iso2,-iso3)
who6
who7 = who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_") %>% separate(sexage, into = c("sex","age"), sep = 1) %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2) %>% count(new,name="numeroDiNew") %>% select(-new,-iso2,-iso3)
who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = nomiColonneNuove, sep = "_")
who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_")
who7 = who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_") %>% separate(sexage, into = c("sex","age"), sep = 1) %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2) %>% count(new,name="numeroDiNew")
who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_") %>% separate(sexage, into = c("sex","age"), sep = 1) %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2) %>% count(new,name="numeroDiNew") %>% select(-new,-iso2,-iso3)
who7 = who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_") %>% separate(sexage, into = c("sex","age"), sep = 1) %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2) %>% count(new,name="numeroDiNew") %>% select(-iso2)
who7 = who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_") %>% separate(sexage, into = c("sex","age"), sep = 1) %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2) %>% count(new,name="numeroDiNew")
who7
who7 = who %>% pivot_longer(new_sp_m014:newrel_f65, names_to = "key",values_to = "cases", values_drop_na = TRUE ) %>% mutate(key = str_replace(key,"newrel","new_rel")) %>% separate(key, into = c("new","type", "sexage"), sep = "_") %>% separate(sexage, into = c("sex","age"), sep = 1) %>% mutate(age = str_replace(age,"014","0014")) %>% mutate(age = str_replace(age,"65","6565")) %>% separate(age,into = c("age_high", "age_low"),sep = 2) %>% select(-new,-iso2,-iso3)
all(who7 == who6)
library(readr)
library(tidyr)
library(dplyr)
library(lubridate)
library(stringr)
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("%02d",c(seq(93,99),seq(0,21))))
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("s",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("%s",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("%ss",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("%d",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("%02d",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
# SOLUZIONE ANALOGA
(years2 = c(as.character(seq(93,99)),str_c("0",as.character(seq(0,9))),as.character(seq(10,21))))
head = "https://www.football-data.co.uk/mmz4281/"
tail = "/I1.csv"
# LINK = head+year+tail
(years = sprintf("%02d",c(seq(93,99),seq(0,21))))  #  "%02d" serve per formattare ogni numero in 2 caratteri in stringa
# SOLUZIONE ANALOGA
(years2 = c(as.character(seq(93,99)),str_c("0",as.character(seq(0,9))),as.character(seq(10,21))))
if (all(years == years2)) print("SOLUZIONI ANALOGHE")
vector("list",2)
list(2)
# CREAZIONE LISTA CON n ELEMENTI VUOTI PER INSERIRCI OGNI LETTURA DA LINK
lista = vector("list",length(years)-1)
# CREAZIONE LISTA CON n ELEMENTI VUOTI PER INSERIRCI OGNI LETTURA DA LINK
(lista = vector("list",length(years)-1))
(links = str_c(head,str_c(years[1:length(years)-1],years[2:length(years)]),tail))
links = str_c(head,str_c(years[1:length(years)-1],years[2:length(years)]),tail)
links[1:3]
names(lista) = years
names(lista) = years[1:length(years)-1]
# CREAZIONE LISTA CON n ELEMENTI VUOTI PER INSERIRCI OGNI LETTURA DA LINK
(lista = vector("list",length(years)-1))
# LETTURA IN SERIE
for (i in 1:length(years)-1){
lista[[i]] = read_csv(links[i], show_col_types = FALSE)
}
# CREAZIONE LISTA CON n ELEMENTI VUOTI PER INSERIRCI OGNI LETTURA DA LINK
(lista = vector("list",length(years)-1))
# LETTURA IN SERIE
for (i in 1:nseasons){
lista[[i]] = read_csv(links[i], show_col_types = FALSE)
}
nseasons = length(years)-1
links = str_c(head,str_c(years[1:nseasons],years[2:length(years)]),tail)
links[1:3]
# CREAZIONE LISTA CON n ELEMENTI VUOTI PER INSERIRCI OGNI LETTURA DA LINK
lista = vector("list",length(years)-1)
# LETTURA IN SERIE
for (i in 1:nseasons){
lista[[i]] = read_csv(links[i], show_col_types = FALSE)
}
names(lista) = years[1:nseasons]
names(lista)
lista$`93`
for (i in 1:nseasons){
lista[[i]] = lista[[1]] %>% filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>% mutate(Date = dmy(Date))
}
lista[[1]]
lista[[1]]
lista[[1]] %>% mutate(Date = dmy(Date))
lista[[1]] %>% mutate(Date = dmy(Date))
for (i in 1:nseasons){
lista[[i]] = lista[[1]] %>% filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>% mutate(Date = dmy(Date))
}
lista[[1]]
lista[[1]]
for (i in 1:nseasons){
lista[[i]] = lista[[i]] %>% filter(!is.na(Date), !is.na(FTHG), !is.na(FTAG)) %>% mutate(Date = dmy(Date))
}
lista[[1]]
lista[[1]]
lista %>% select(Date)
lista[Date]
lista[[1]]
lista[[1]]$Date = dmy(lista[[1]]$Date)
